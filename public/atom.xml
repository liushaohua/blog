<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[厘澄的小站-专注前端开发]]></title>
  <subtitle><![CDATA[厘澄的小站-专注前端开发]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.liushaohua.cn/"/>
  <updated>2016-04-27T02:10:50.268Z</updated>
  <id>http://www.liushaohua.cn/</id>
  
  <author>
    <name><![CDATA[厘澄]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Atom编辑器常用插件]]></title>
    <link href="http://www.liushaohua.cn/2016/06/26/atom/"/>
    <id>http://www.liushaohua.cn/2016/06/26/atom/</id>
    <published>2016-06-26T01:57:35.000Z</published>
    <updated>2016-04-27T02:10:50.268Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="https://atom.io/packages/terminal-plus" target="_blank" rel="external">terminal-plus</a> atom的控制台</li>
<li><a href="https://atom.io/packages/autocomplete-html-entities" target="_blank" rel="external">autocomplete-html-entities</a> html自动补全</li>
<li><a href="https://atom.io/packages/autocomplete-css" target="_blank" rel="external">autocomplete-css</a> css自动补全</li>
<li><a href="https://atom.io/packages/open-in-browsers" target="_blank" rel="external">open-in-browsers</a> 一键打开浏览器</li>
<li><a href="https://atom.io/packages/es6-javascript" target="_blank" rel="external">es6-javascript</a> es6代码补全</li>
<li><a href="https://atom.io/packages/javascript-snippets" target="_blank" rel="external">javascript-snippets</a> JavaScript代码补全</li>
<li><a href="https://atom.io/packages/esformatter" target="_blank" rel="external">esformatter</a> JavaScript保存后自动规范化代码</li>
<li><a href="https://atom.io/packages/linter-js-standard" target="_blank" rel="external">linter-js-standard</a> JavaScript错误校验</li>
<li><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a> 文件类型icon小图标</li>
<li><a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblockr</a> 一键增加注释</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="https://atom.io/packages/terminal-plus" target="_blank" rel="external">terminal-plus</a> atom的控制台</li>
<li><a href="https:]]>
    </summary>
    
      <category term="Atom" scheme="http://www.liushaohua.cn/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[web前端开发面试题整理]]></title>
    <link href="http://www.liushaohua.cn/2016/04/15/f2e/"/>
    <id>http://www.liushaohua.cn/2016/04/15/f2e/</id>
    <published>2016-04-15T03:14:32.000Z</published>
    <updated>2016-04-27T01:55:21.336Z</updated>
    <content type="html"><![CDATA[<p>前端开发面试题收集整理，持续更新中</p>
<a id="more"></a>
<h3 id="CSS_u76F8_u5173"><a href="#CSS_u76F8_u5173" class="headerlink" title="CSS相关"></a>CSS相关</h3><ul>
<li>display:none和visibility:hidden的区别</li>
<li>CSS中 link 和@import 的区别</li>
<li>position的absolute与fixed共同点与不同点</li>
<li>介绍一下CSS的盒子模型</li>
<li>CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</li>
<li>列出display的值，说明他们的作用。position的值， relative和absolute分别是相对于谁进行定位的？</li>
<li>CSS3有哪些新特性？</li>
<li>为什么要初始化CSS样式</li>
<li>对BFC规范的理解？</li>
<li>解释下 CSS sprites，以及你要如何在页面或网站中使用它？</li>
</ul>
<h3 id="HTML_u76F8_u5173"><a href="#HTML_u76F8_u5173" class="headerlink" title="HTML相关"></a>HTML相关</h3><ul>
<li>说说你对语义化的理解？</li>
<li>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</li>
<li>你知道多少种Doctype文档类型？</li>
<li>HTML与XHTML——二者有什么区别？</li>
<li>解释下浮动和它的工作原理？清除浮动的技巧？</li>
<li>浮动元素引起的问题和解决办法？</li>
<li>IE 8以下版本的浏览器中的盒模型有什么不同</li>
<li>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</li>
<li>iframe的优缺点？</li>
<li>如何实现浏览器内多个标签页之间的通信?</li>
<li>webSocket如何兼容低浏览器？</li>
<li>嵌入JS应该放在什么位置？</li>
<li>说出至少一个只有ie支持的html标签</li>
</ul>
<h3 id="JavaScript_u76F8_u5173"><a href="#JavaScript_u76F8_u5173" class="headerlink" title="JavaScript相关"></a>JavaScript相关</h3><ul>
<li>DOM操作——怎样添加、移除、移动、复制、创建和查找节点</li>
<li>null和undefined的区别？</li>
<li>new操作符具体干了什么呢?</li>
<li>JSON 的了解？</li>
<li>js延迟加载的方式有哪些</li>
<li>如何解决跨域问题</li>
<li>documen.write和 innerHTML的区别</li>
<li>.call() 和 .apply() 的区别和作用</li>
<li>哪些操作会造成内存泄漏？</li>
<li>JavaScript中的作用域与变量声明提升</li>
<li>如何判断当前脚本运行在浏览器还是node环境中？</li>
<li>javascript对象的几种创建方式</li>
<li>JavaScript原型，原型链 ? 有什么特点？</li>
<li>javascript继承的6种方法，如何避免原型链上面的对象共享</li>
<li>ajax过程</li>
<li>ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?</li>
<li>异步加载和延迟加载</li>
<li>GET和POST的区别，何时使用POST？</li>
<li>哪些地方会出现css阻塞，哪些地方会出现js阻塞？</li>
<li>Javascript无阻塞加载具体方式</li>
<li>闭包相关问题？</li>
<li>js事件处理程序问题？</li>
<li>eval是做什么的？</li>
<li>事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</li>
<li>AMD和CMD 规范的区别？</li>
<li>如何获取UA？</li>
<li>请你谈谈Cookie的弊端</li>
<li>浏览器本地存储</li>
<li>web storage和cookie的区别</li>
<li>简述在IE下mouseover和mouseenter</li>
</ul>
<h3 id="Node_u76F8_u5173"><a href="#Node_u76F8_u5173" class="headerlink" title="Node相关"></a>Node相关</h3><ul>
<li>Node.js的适用场景？</li>
<li>对Node的优点和缺点提出了自己的看法？</li>
</ul>
<h3 id="u7EFC_u5408_u6027"><a href="#u7EFC_u5408_u6027" class="headerlink" title="综合性"></a>综合性</h3><ul>
<li>页面重构怎么操作？</li>
<li>网站重构的理解？</li>
<li>WEB应用从服务器主动推送Data到客户端有那些方式？</li>
<li>HTTP状态码</li>
<li>cachecontrol</li>
<li>你遇到过比较难的技术问题是？你是如何解决的？</li>
<li>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</li>
<li>列举IE 与其他浏览器不一样的特性？</li>
<li>99%的网站都需要被重构是那本书上写的？</li>
<li>什么叫优雅降级和渐进增强？</li>
<li>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</li>
<li>你常用的开发工具是什么，为什么？</li>
<li>对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？</li>
<li>你在现在的团队处于什么样的角色，起到了什么明显的作用？</li>
<li>你认为怎样才是全端工程师（Full Stack developer）？</li>
<li>介绍一个你最得意的作品吧？ #</li>
<li>项目中遇到什么问题？如何解决？</li>
<li>你的优点是什么？缺点是什么？</li>
<li>如何管理前端团队?</li>
<li>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</li>
</ul>
<h3 id="u903B_u8F91_u5224_u65AD_26amp_3B_26amp_3B_u8F93_u51FA"><a href="#u903B_u8F91_u5224_u65AD_26amp_3B_26amp_3B_u8F93_u51FA" class="headerlink" title="逻辑判断&amp;&amp;输出"></a>逻辑判断&amp;&amp;输出</h3><h4 id="html_26amp_3B_26amp_3Bcss"><a href="#html_26amp_3B_26amp_3Bcss" class="headerlink" title="html&amp;&amp;css"></a>html&amp;&amp;css</h4><ul>
<li><p>写出下列代码在各个浏览器中的颜色值?</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background: red;</span><br><span class="line">_background: green;</span><br><span class="line">*background: blue;</span><br><span class="line">background: black\9;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加些css让其水平垂直居中。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"____________________________"</span>&gt;</span></span><br><span class="line">    颜海镜</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如下代码，在空白处填写代码，是其点击时，前景色为白色，背景色为黑色</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">onclick</span>=<span class="value">"_________________"</span>&gt;</span>颜海镜<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><ul>
<li><p>下面代码的输出值是？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>&amp;&amp;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>写出下面代码的输出值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.a)&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> objb = obj.b;</span><br><span class="line"></span><br><span class="line">obj.b();</span><br><span class="line">objb();</span><br><span class="line">obj.b.call(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>写出下列代码的输出值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.prototype.a = <span class="number">1</span>;</span><br><span class="line">B.prototype.a = <span class="number">1</span>;</span><br><span class="line">C.prototype.a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> A());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> B());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> C(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>写出下列代码的输出值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()();</span><br></pre></td></tr></table></figure>
</li>
<li><p>书写代码，点击时从1分钟开始，每秒递减到0。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">onclick</span>=<span class="value">"test();"</span>&gt;</span>颜海镜<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>前端必备知识</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">arguments</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">23</span>; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typeof</span> g();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> x;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">1</span>, x = y = <span class="keyword">typeof</span> x;</span><br><span class="line">x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> f();</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.baz; </span><br><span class="line">  &#125;,</span><br><span class="line">  baz: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>]();</span><br><span class="line">&#125;)(foo.bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.baz; </span><br><span class="line">  &#125;,</span><br><span class="line">  baz: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typeof</span> (f = foo.bar)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="keyword">var</span> f = (</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span>; </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>; </span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br><span class="line"><span class="keyword">typeof</span> f;</span><br><span class="line"></span><br><span class="line"><span class="comment">//9</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;) &#123;</span><br><span class="line">  x += <span class="keyword">typeof</span> f;</span><br><span class="line">&#125;</span><br><span class="line">x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> x = [<span class="keyword">typeof</span> x, <span class="keyword">typeof</span> y][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//11</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">foo</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> foo.bar;</span><br><span class="line">&#125;)(&#123; foo: &#123; bar: <span class="number">1</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//12</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">return</span> f();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//13</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> f; &#125;</span><br><span class="line"><span class="keyword">new</span> f() <span class="keyword">instanceof</span> f;</span><br><span class="line"></span><br><span class="line"><span class="comment">//14</span></span><br><span class="line"><span class="keyword">with</span> (<span class="function"><span class="keyword">function</span>(<span class="params">x, undefined</span>)</span>&#123;&#125;) length;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u7F16_u7801_u7C7B"><a href="#u7F16_u7801_u7C7B" class="headerlink" title="编码类"></a>编码类</h3><ul>
<li>js对象的深度克隆</li>
<li>写一个通用的事件侦听器函数?</li>
<li>js数组去重</li>
<li>js操作获取和设置cookie</li>
<li>正则表达式匹配，开头为11N, 12N或1NNN，后面是-7-8个数字的电话号码。</li>
</ul>
<h3 id="u672A_u5206_u7C7B"><a href="#u672A_u5206_u7C7B" class="headerlink" title="未分类"></a>未分类</h3><ul>
<li>线程与进程的区别 </li>
<li>你如何对网站的文件和资源进行优化</li>
<li>请说出三种减少页面加载时间的方法</li>
<li>你都使用哪些工具来测试代码的性能？</li>
<li>什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？</li>
<li>你有哪些性能优化的方法？</li>
<li>http状态码有那些？分别代表是什么意思？</li>
<li>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</li>
<li>平时如何管理你的项目？</li>
<li>说说最近最流行的一些东西吧？常去哪些网站？</li>
<li>前端安全问题？</li>
<li>ie各版本和chrome可以并行下载多少个资源</li>
<li>grunt， YUI compressor 和 google clojure用来进行代码压缩的用法</li>
<li>Flash、Ajax各自的优缺点，在使用中如何取舍？</li>
<li>请解释一下 JavaScript 的同源策略</li>
<li>为什么要有同源限制？</li>
<li>什么是 “use strict”; ? 使用它的好处和坏处分别是什么？</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>前端开发面试题收集整理，持续更新中</p>]]>
    
    </summary>
    
      <category term="面试题" scheme="http://www.liushaohua.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小米智能摄像机体验之旅]]></title>
    <link href="http://www.liushaohua.cn/2016/04/05/camera/"/>
    <id>http://www.liushaohua.cn/2016/04/05/camera/</id>
    <published>2016-04-05T01:19:39.000Z</published>
    <updated>2016-04-05T01:58:14.534Z</updated>
    <content type="html"><![CDATA[<h3 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h3><p>去年在永泰庄时候晚，晚上2点左右被房东电话吵醒，说楼下敲门没人开，让我看下水龙头，我起来，着实吓了一大跳，卧室里的地上都是水，并且在从客厅里源源不断的涌向卧室，遂跑到客厅，正是洗衣机的灌水管被水流冲开了，关之，大水流了满地，而两只小呆逼的喵则跳到桌子上了，站在高处害怕的喵喵叫，没两分钟，楼下的大爷就上来了，说家里被淹了，让我们马上把水墩干净防止下漏更多，立马我们就忙活起来了，直接拿床单吸水，地毯吸水，4个人忙活了一个小时，终于算是把家里的水清的差不多了遂去楼下看了下老大爷家房子，漏的不是特别多，客厅墙壁上都有水，卧室的灯还有些滴水，房子是9几年的老小区了而且也没有做防水，但总体还好，发现的不是太晚，家具什么的没有淹了，但毕竟因为我们房子还是淹了，换谁都说不过去，经过几天和房东and楼下老大爷都周旋与诚挚道歉数次，最后赔偿1500了事终于算是把这页掀过去了，至今还心有余悸。去年12月搬来了京旺家园，最近忘了是新闻还说哪里听说了<code>xx家漏水把楼下几家都淹了，赔了近20w</code>，顿时替xx忧伤了一下，而且不知道啥时候强开始迫症犯了，开水龙头后总是要确认几次关好才放心，前不久入手了个小米wifi放大器，了解到了小米有款智能摄像机，价格还挺亲民，家里刚好有两只娃在家，入手一个小米智能摄像机是个刚需，遂下了手。<br><a id="more"></a></p>
<h3 id="u5E94_u7528"><a href="#u5E94_u7528" class="headerlink" title="应用"></a>应用</h3><p>在天猫的旗舰店下了单，169元，为啥用天猫呢？因为平时淘宝用的多，在天猫上也买了不少东西比较方便质量也没有遇到过大问题，经过几天的等待终于收到了我的货。</p>
<p>套餐中包括一个8g内存卡、读卡器若干</p>
<p><img lazy-src="https://o3o97s3zl.qnssl.com/2016040204.png?imageView2/2/w/800/q/90" alt="外观"></p>
<p>小米摄像机采用12V USB供电，类似Dropcam Pro的经典设计，简洁大方，全玻璃镜片的镜片材质，能与家居产品和谐搭配，且小蚁可将摄像头主体拆下单独隐藏起来，适合充当家庭防盗监控摄像头，俯仰角度可调，110°广角，不论放在高处低处、俯视仰视均可轻松应对。</p>
<p><img lazy-src="https://o3o97s3zl.qnssl.com/201604021.png?imageView2/2/w/800/q/90" alt="启动页面"></p>
<p>小米摄像机使用方便，只需要连接USB电源，打开手机的<code>小米智能家居</code>app，增加一个小米智能摄像机输入 Wi-Fi 密码，扫描下手机显示蓝灯即可轻松连接。</p>
<p><img lazy-src="https://o3o97s3zl.qnssl.com/2016040202.png?imageView2/2/w/800/q/90" alt="夜视画面"></p>
<p>APP界面，可通过时间轴翻看历史录像。按住话筒图标，可随时进行双向语音通话。画面可双指缩放，模拟数码4倍变焦效果。当画面产生较大变化可以报警，虽然画质只有720p，看起来也还不错可以接受，夜视方面也非常清晰，支持分享功能，可以分享给多个人一起使用摄像功能，总体来说的话，性价比较高，画质方面虽然不如其它同类设备，但基本满足够用，摄像功能会有小延时，交互方面简单方便，大力推荐，刚需的朋友可以入手，<a href="http://www.mi.com/xiaoyi/" target="_blank" rel="external">奉上链接</a></p>
<p><img lazy-src="https://o3o97s3zl.qnssl.com/2016040203.png?imageView2/2/w/800/q/90" alt="小米智能摄像机03"></p>
<p>再也不用担心我的小猫子半夜啃花盆了~gaga</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h3><p>去年在永泰庄时候晚，晚上2点左右被房东电话吵醒，说楼下敲门没人开，让我看下水龙头，我起来，着实吓了一大跳，卧室里的地上都是水，并且在从客厅里源源不断的涌向卧室，遂跑到客厅，正是洗衣机的灌水管被水流冲开了，关之，大水流了满地，而两只小呆逼的喵则跳到桌子上了，站在高处害怕的喵喵叫，没两分钟，楼下的大爷就上来了，说家里被淹了，让我们马上把水墩干净防止下漏更多，立马我们就忙活起来了，直接拿床单吸水，地毯吸水，4个人忙活了一个小时，终于算是把家里的水清的差不多了遂去楼下看了下老大爷家房子，漏的不是特别多，客厅墙壁上都有水，卧室的灯还有些滴水，房子是9几年的老小区了而且也没有做防水，但总体还好，发现的不是太晚，家具什么的没有淹了，但毕竟因为我们房子还是淹了，换谁都说不过去，经过几天和房东and楼下老大爷都周旋与诚挚道歉数次，最后赔偿1500了事终于算是把这页掀过去了，至今还心有余悸。去年12月搬来了京旺家园，最近忘了是新闻还说哪里听说了<code>xx家漏水把楼下几家都淹了，赔了近20w</code>，顿时替xx忧伤了一下，而且不知道啥时候强开始迫症犯了，开水龙头后总是要确认几次关好才放心，前不久入手了个小米wifi放大器，了解到了小米有款智能摄像机，价格还挺亲民，家里刚好有两只娃在家，入手一个小米智能摄像机是个刚需，遂下了手。<br>]]>
    
    </summary>
    
      <category term="个人随笔" scheme="http://www.liushaohua.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
      <category term="小米智能摄像机" scheme="http://www.liushaohua.cn/tags/%E5%B0%8F%E7%B1%B3%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[沟通的必要性]]></title>
    <link href="http://www.liushaohua.cn/2016/03/21/talk/"/>
    <id>http://www.liushaohua.cn/2016/03/21/talk/</id>
    <published>2016-03-21T09:48:36.000Z</published>
    <updated>2016-03-21T10:00:51.133Z</updated>
    <content type="html"><![CDATA[<p>引:沟通是工作生活中避免不了的一部分，好的沟通可以提高效率、改善人际关系<br><a id="more"></a></p>
<h3 id="u5B58_u5728_u7684_u95EE_u9898"><a href="#u5B58_u5728_u7684_u95EE_u9898" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>上周五我代表所在的<code>UED</code>组和事业群老大进行了汇报工作以及下Q规划，提到<code>沟通</code>，可真是我的短板,不，简直是差的要死，虽然勉强算是通过了，领导和同事们表示说的也<code>还不错</code>，但我觉得表述上还是存在很大问题，话语间思绪会被自己打断，找不到重点，并伴有<code>磕巴症</code>。其实还是自己在沟通方面存在问题，早在去年12月份的时候进行职级评审的时候，虽然照着镜子说了几遍，但来真的了，15分钟的阐述我就感觉脑子有点发<code>蒙</code>了，一开始准备好的东西也没有描述清楚，导致掉了一级，自己都感觉不怎么地了，他人更不用说了。</p>
<h3 id="u6539_u5584_u76EE_u6807"><a href="#u6539_u5584_u76EE_u6807" class="headerlink" title="改善目标"></a>改善目标</h3><p>今年1月份参加了<code>管理起航</code>课程,学到了如何改善沟通技巧，老师讲的不错，自己吸收的却不怎么好，以后要改进，迅速提高，在看些相关的书，对着镜子不断练习，沟通不好就废了，另外还要提高自己的总结能力、分析能力，总之，一步步来，努力充实自己，提高自己的各方面的能力，加油…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>引:沟通是工作生活中避免不了的一部分，好的沟通可以提高效率、改善人际关系<br>]]>
    
    </summary>
    
      <category term="个人随笔" scheme="http://www.liushaohua.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[晒晒我家的动感喵星人]]></title>
    <link href="http://www.liushaohua.cn/2016/02/29/cat/"/>
    <id>http://www.liushaohua.cn/2016/02/29/cat/</id>
    <published>2016-02-29T05:46:08.000Z</published>
    <updated>2016-04-01T05:50:35.707Z</updated>
    <content type="html"><![CDATA[<p>14年8月，我家迎来了一个新成员[弥撒]，一只活泼的喵星人，现在陪伴了俺们一年半有余了，给我们的生活增加了很多乐趣，晒一晒~~<br><a id="more"></a></p>
<p><img lazy-src="https://o3o97s3zl.qnssl.com/misa1.jpg?imageView2/2/w/800/q/90" alt="弥撒01"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa2.jpg?imageView2/2/w/800/q/90" alt="弥撒02"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa3.jpg?imageView2/2/w/800/q/90" alt="弥撒03"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa4.jpg?imageView2/2/w/800/q/90" alt="弥撒04"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa5.jpg?imageView2/2/w/800/q/90" alt="弥撒05"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa6.jpg?imageView2/2/w/800/q/90" alt="弥撒06"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa7.jpg?imageView2/2/w/800/q/90" alt="弥撒07"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa8.jpg?imageView2/2/w/800/q/90" alt="弥撒08"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa9.jpg?imageView2/2/w/800/q/90" alt="弥撒09"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa10.jpg?imageView2/2/w/800/q/90" alt="弥撒10"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa11.jpg?imageView2/2/w/800/q/90" alt="弥撒11"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa12.jpg?imageView2/2/w/800/q/90" alt="弥撒12"><br><img lazy-src="https://o3o97s3zl.qnssl.com/misa13.jpg?imageView2/2/w/800/q/90" alt="弥撒13"></p>
<h3 id="u7ED3_u8BED_uFF1A_u5C31_u662F_u8FD9_u4E48_u9738_u6C14_uFF01"><a href="#u7ED3_u8BED_uFF1A_u5C31_u662F_u8FD9_u4E48_u9738_u6C14_uFF01" class="headerlink" title="结语：就是这么霸气！"></a>结语：就是这么霸气！</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>14年8月，我家迎来了一个新成员[弥撒]，一只活泼的喵星人，现在陪伴了俺们一年半有余了，给我们的生活增加了很多乐趣，晒一晒~~<br>]]>
    
    </summary>
    
      <category term="个人随笔" scheme="http://www.liushaohua.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
      <category term="喵星人" scheme="http://www.liushaohua.cn/tags/%E5%96%B5%E6%98%9F%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[纪念我的2015年终总结]]></title>
    <link href="http://www.liushaohua.cn/2016/01/31/%E7%BA%AA%E5%BF%B5%E6%88%91%E7%9A%842015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://www.liushaohua.cn/2016/01/31/纪念我的2015年终总结/</id>
    <published>2016-01-31T03:48:31.000Z</published>
    <updated>2016-01-31T04:46:23.931Z</updated>
    <content type="html"><![CDATA[<p>关于<code>年终总结</code>这回事，我决的还是有<code>必要的</code>，虽然不是那么值得<code>几年</code>,但2015对我来说也是不<code>平凡</code>的一年，时间过得似乎是忽快忽慢，让人措手不及，简单的记录下，激励下自己。<br><a id="more"></a></p>
<h3 id="1_u6708"><a href="#1_u6708" class="headerlink" title="1月"></a>1月</h3><p>1月貌似是没发生什么大事，当时我还住在<code>永泰庄</code>的自如小单间里，生活平淡工作开心</p>
<h3 id="2_u6708"><a href="#2_u6708" class="headerlink" title="2月"></a>2月</h3><p>2月给人的印象是<code>过年月</code>，沉浸在年前、年中<code>鸡血不足</code>的状态</p>
<h3 id="3_u6708"><a href="#3_u6708" class="headerlink" title="3月"></a>3月</h3><p>年后，离开了自己工作近1年半的地方，可能不到1年半，1年零2 3个月？来到了一家<code>创业</code>型公司，开启了一段新的旅程</p>
<h3 id="4_u6708"><a href="#4_u6708" class="headerlink" title="4月"></a>4月</h3><p>4月似乎是自如租的房子到期了，搬到旁边不到100米的另外一个小两居的房子里（忘记是3月还是4月了），房子不大，不到60平，<code>3800</code>，厕所卫生间条件就略差了，一分钱一分价，工作也算正常，创业公司大部分都是加班会多一点，一般不会超过9点，同事关系还不错，不忙的时候还可以学习下，<code>node</code>和<code>mogo</code>都有提高。</p>
<h3 id="5_u30016_u6708"><a href="#5_u30016_u6708" class="headerlink" title="5、6月"></a>5、6月</h3><p>具体记不清楚了，不知哪天上班的时候碰到一只小黑猫，带回了家，俺家也迎来了第二只小猫子，工作上发生一点小插曲，公司扩招的同时，开始有部分技术领导相继离职，后端也开始由PHP转向JAVA，<code>前端</code>还是比较稳定，还是不受重视~~ haha，和领导也有过相关沟通，不管孰是孰非，最终还是申请离职了，<code>6.23</code>号入职现公司。</p>
<h3 id="7_u30018_u30019_u300110_u6708"><a href="#7_u30018_u30019_u300110_u6708" class="headerlink" title="7、8、9、10月"></a>7、8、9、10月</h3><p>已经适应现在的工作，住的地方又由永泰庄搬到了望京，上班骑自行车的话20分钟</p>
<h3 id="11_u300112_u30011_u6708"><a href="#11_u300112_u30011_u6708" class="headerlink" title="11、12、1月"></a>11、12、1月</h3><p>转眼年底，部门的前端团队日益壮大，由之前的1个人变成了现在的7个人，工作流程步入正轨，团队里的同事们比较和谐，团队能力再一点点提高，由之前的PC慢慢的涉及到微信，混合应用，同事领导对我也算认可，自身有待提高的地方还很多，15年的技术成长还算缓慢，16年要加快步伐了，不然就掉队了， - -!又搬家了，搬到了<code>京旺家园</code>，《芈月传》<code>陪</code>女友看完了，收获良多</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>15年对我来说算个沉淀，<code>芈月</code>中说的好<code>有多少付出，就有多少回报</code>,16年要把欠大家和欠自己的补回来，<code>努力工作和学习</code> - 自勉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于<code>年终总结</code>这回事，我决的还是有<code>必要的</code>，虽然不是那么值得<code>几年</code>,但2015对我来说也是不<code>平凡</code>的一年，时间过得似乎是忽快忽慢，让人措手不及，简单的记录下，激励下自己。<br>]]>
    
    </summary>
    
      <category term="年终总结" scheme="http://www.liushaohua.cn/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript学习笔记]]></title>
    <link href="http://www.liushaohua.cn/2016/01/26/ECMAScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.liushaohua.cn/2016/01/26/ECMAScript学习笔记/</id>
    <published>2016-01-26T06:13:51.000Z</published>
    <updated>2016-02-01T07:46:08.894Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript做前端的同学都不会陌生，去年中Ecma国际大会宣布正式批准ECMA-262第6版，亦即ECMAScript 2015（曾用名：ECMAScript 6、ES6）的语言规范。ES6对于ES5是进行了相当大的改进，增加了许许多多的新特性，使得JavaScript<code>看上去</code>不再那么<code>渣</code>，目前还没有一款支持全部ES6新特性的的服务代理(浏览器+服务器端)，目前我们能做到的就是把ES6代码转译成ES5的代码，小道消息说主流浏览器完全实现ES6特性大概需要一年左右时间，毕竟不是官方发出的，要是2年没支持，咱也没办法不是。</p>
<a id="more"></a>
<p>由简入深，实践运用下</p>
<h3 id="let_const_u547D_u4EE4"><a href="#let_const_u547D_u4EE4" class="headerlink" title="let const命令"></a>let const命令</h3><ul>
<li><code>let</code>类此于<code>var</code>，用来声明<code>块级作用域</code>变量，并且不允许重复声明</li>
<li><code>const</code>是用来定义常量，何为常量？<code>一棵树上吊死</code>，也不允许重复声明</li>
</ul>
<p><strong>let代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="comment">//i = 10 for和function不同，for中变量的作用域是上一级function或者全局，而function中变量的作用域是function内部，所以for循环后，i是继续存在的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">2</span>](); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line">       <span class="comment">//a 123</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//a 报错</span></span><br></pre></td></tr></table></figure></p>
<p><strong>const代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WIDTH = <span class="number">45</span>;</span><br><span class="line">WIDTH = <span class="number">50</span>；</span><br><span class="line"><span class="comment">//WIDTH 45</span></span><br></pre></td></tr></table></figure></p>
<h3 id="async_await"><a href="#async_await" class="headerlink" title="async await"></a>async await</h3><ul>
<li>关于<code>异步编程</code>，有多种方法，利弊就不多说了<ul>
<li>callback</li>
<li>事件监听</li>
<li>观察者</li>
<li>Promise</li>
</ul>
</li>
<li>ES6/7提供了终极的解决方案<code>async await</code></li>
<li>有些特性必须要借助<code>polyfill/runtime</code>才能使用</li>
<li><code>并行处理</code> - 使用 <code>async/await</code> 来处理异步时，是串行执行的。但很多场景下我们需要并行处理，这样可以大大提高执行效率，此时可以结合 Promise.all 来处理。</li>
</ul>
<p><strong>async await代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> f1 = <span class="keyword">await</span> readFile(path.normalize(__dirname + <span class="string">'/003.js'</span>));</span><br><span class="line">  <span class="keyword">let</span> f2 = <span class="keyword">await</span> readFile(path.normalize(__dirname + <span class="string">'/003.js'</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result = asyncReadFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">//并行处理</span></span><br><span class="line"><span class="keyword">async</span> indexAction()&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">this</span>.getServiceData1();</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">this</span>.getAPIData2();</span><br><span class="line">    <span class="keyword">let</span> [p1Data, p2Data] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([p1, p2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="export_import"><a href="#export_import" class="headerlink" title="export import"></a>export import</h3><ul>
<li>模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突</li>
<li>定义好模块的输出以后就可以在另外一个模块通过import引用</li>
</ul>
<p><strong>export代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//test.js</span></span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">'Rainbow'</span>;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="string">'24'</span>;</span><br><span class="line"> <span class="keyword">export</span> &#123;name, age&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js default 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者写成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getAge;</span><br></pre></td></tr></table></figure></p>
<p><strong>import代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line">//index.js</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test form <span class="string">'./test.js'</span>;  <span class="comment">//import * as 就完成了模块整体的导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">// 导入的时候不需要花括号</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><ul>
<li>Class之间可以通过extends关键字，实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  constructor(x, y, color) &#123;</span><br><span class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 等同于parent.constructor(x, y)</span></span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 等同于parent.toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>ECMAScript做前端的同学都不会陌生，去年中Ecma国际大会宣布正式批准ECMA-262第6版，亦即ECMAScript 2015（曾用名：ECMAScript 6、ES6）的语言规范。ES6对于ES5是进行了相当大的改进，增加了许许多多的新特性，使得JavaScript<code>看上去</code>不再那么<code>渣</code>，目前还没有一款支持全部ES6新特性的的服务代理(浏览器+服务器端)，目前我们能做到的就是把ES6代码转译成ES5的代码，小道消息说主流浏览器完全实现ES6特性大概需要一年左右时间，毕竟不是官方发出的，要是2年没支持，咱也没办法不是。</p>]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="http://www.liushaohua.cn/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ThinkJS构建web应用]]></title>
    <link href="http://www.liushaohua.cn/2015/12/01/thinkjs/"/>
    <id>http://www.liushaohua.cn/2015/12/01/thinkjs/</id>
    <published>2015-12-01T09:09:58.000Z</published>
    <updated>2016-03-11T07:57:55.552Z</updated>
    <content type="html"><![CDATA[<p>玩过<code>Node</code>的同学对<code>Express</code>肯定不陌生，是TJ大神主刀开发的，今天咱们来说<code>下ThinkJS</code>，提到<code>ThinkPHP</code>各位同学肯定秒懂了，感谢<code>奇舞团</code>&amp;&amp;<code>成银老师</code>。</p>
<a id="more"></a>
<p>ThinkJS基于<code>MVC</code>设计，把数据视图表现分离得当，把常用的Node方法进行了封装，入门简单，大大的提高了开发效率，让我们可以随随便便分分钟构建一个web应用，废话不多说，直接来。</p>
<h3 id="u5B89_u88C5ThinkJS"><a href="#u5B89_u88C5ThinkJS" class="headerlink" title="安装ThinkJS"></a>安装ThinkJS</h3><ul>
<li>npm install thinkjs@2 -g –verbos</li>
</ul>
<h3 id="u521B_u5EFA_u9879_u76EE_26amp_3B_26amp_3B_u542F_u52A8"><a href="#u521B_u5EFA_u9879_u76EE_26amp_3B_26amp_3B_u542F_u52A8" class="headerlink" title="创建项目&amp;&amp;启动"></a>创建项目&amp;&amp;启动</h3><ul>
<li>thinkjs new project_path –es6</li>
<li>cd project_path &amp;&amp; npm install</li>
<li>npm start</li>
</ul>
<h3 id="u76EE_u5F55_u7ED3_u6784"><a href="#u76EE_u5F55_u7ED3_u6784" class="headerlink" title="目录结构"></a>目录结构</h3><p><img lazy-src="https://o3o97s3zl.qnssl.com/20151201_route.png" alt="目录结构"></p>
<ul>
<li>src 查看当前所有模块<ul>
<li>bootstrap</li>
<li>config</li>
<li>controller</li>
</ul>
</li>
<li>view 视图文件</li>
</ul>
<h3 id="common_-_26gt_3B_config_-_26gt_3B_config-js__u4FEE_u6539config"><a href="#common_-_26gt_3B_config_-_26gt_3B_config-js__u4FEE_u6539config" class="headerlink" title="common -&gt; config -&gt; config.js 修改config"></a>common -&gt; config -&gt; config.js 修改config</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  route_on: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="u5F00_u542F_u9ED8_u8BA4_u8DEF_u7531_uFF0C_u5728config_u76EE_u5F55_u4E0B_u521B_u5EFA_router-js"><a href="#u5F00_u542F_u9ED8_u8BA4_u8DEF_u7531_uFF0C_u5728config_u76EE_u5F55_u4E0B_u521B_u5EFA_router-js" class="headerlink" title="开启默认路由，在config目录下创建 router.js"></a>开启默认路由，在config目录下创建 router.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义路由规则</span></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">	[<span class="string">"page/:id"</span>, <span class="string">"index/page"</span>],					<span class="comment">//详情页</span></span><br><span class="line">	[<span class="string">"archives"</span>,<span class="string">"index/archives"</span>],				<span class="comment">//归档</span></span><br><span class="line">	[<span class="string">"error"</span>,<span class="string">"index/error"</span>]						<span class="comment">//错误</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="u4FEE_u6539_u9875_u9762"><a href="#u4FEE_u6539_u9875_u9762" class="headerlink" title="修改页面"></a>修改页面</h3><ul>
<li>进入 view -&gt; home -&gt; index_index.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"msgBox"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">h2</span>&gt;</span>来 , 说说你在做什么 , 想什么<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"userName"</span> <span class="attribute">class</span>=<span class="value">"f-text"</span> <span class="attribute">value</span>=<span class="value">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"face"</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face1.gif"</span> <span class="attribute">class</span>=<span class="value">"current"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face2.gif"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face3.gif"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face4.gif"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face5.gif"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face6.gif"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face7.gif"</span> /&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face8.gif"</span> /&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"conBox"</span> <span class="attribute">class</span>=<span class="value">"f-text"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"tr"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"countTxt"</span>&gt;</span>还能输入<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">strong</span> <span class="attribute">class</span>=<span class="value">"maxNum"</span>&gt;</span>140<span class="tag">&lt;/<span class="title">strong</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>个字<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"sendBtn"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">""</span> <span class="attribute">title</span>=<span class="value">"快捷键 Ctrl+Enter"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">h3</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>大家在说<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">%data.forEach(function(v)&#123;%</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span> <span class="attribute">list_id</span>=<span class="value">"&lt;%=v.id%&gt;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"userPic"</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/static/img/face&lt;%=v.user_id%&gt;.gif"</span> /&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"userName"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="title">%=v.user_name%</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>:<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"msgInfo"</span>&gt;</span><span class="tag">&lt;<span class="title">%=v.text%</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"times"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">%=v.date%</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"del"</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">%&#125;)%</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u589E_u52A0_u63A7_u5236_u5668"><a href="#u589E_u52A0_u63A7_u5236_u5668" class="headerlink" title="增加控制器"></a>增加控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * index action</span><br><span class="line">   * 首页控制器</span><br><span class="line">   * @return &#123;Promise&#125; []</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">async</span> indexAction()&#123;</span><br><span class="line">	<span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.model(<span class="string">'list'</span>).getList();</span><br><span class="line">	<span class="keyword">this</span>.assign(<span class="string">'data'</span>, data);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.display();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * send action</span><br><span class="line">   * 发送消息</span><br><span class="line">   * @return &#123;Promise&#125; []</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">async</span> sendAction() &#123;</span><br><span class="line">	  <span class="keyword">if</span>(<span class="keyword">this</span>.isPost())&#123;</span><br><span class="line">		  <span class="keyword">await</span> <span class="keyword">this</span>.model(<span class="string">'list'</span>).addList(<span class="keyword">this</span>.post());</span><br><span class="line">		  <span class="keyword">this</span>.success();</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * send action</span><br><span class="line">   * 删除消息</span><br><span class="line">   * @return &#123;Promise&#125; []</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">async</span> deleteAction() &#123;</span><br><span class="line">	  <span class="keyword">if</span> (<span class="keyword">this</span>.isAjax()) &#123;</span><br><span class="line">		  <span class="keyword">await</span> <span class="keyword">this</span>.model(<span class="string">'list'</span>).delete_list(<span class="keyword">this</span>.post(<span class="string">'id'</span>));	</span><br><span class="line">		  <span class="keyword">this</span>.success();</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;	  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u589E_u52A0model"><a href="#u589E_u52A0model" class="headerlink" title="增加model"></a>增加model</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * model</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">think</span>.<span class="title">model</span>.<span class="title">base</span> </span>&#123;</span><br><span class="line">	<span class="keyword">async</span> getList() &#123;</span><br><span class="line">		<span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.field(<span class="string">"id,user_id,user_name,text,date"</span>).order(<span class="string">'id DESC'</span>).select();</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">async</span> addList(d) &#123;</span><br><span class="line">		<span class="keyword">await</span> <span class="keyword">this</span>.add(d);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">async</span> delete_list(data) &#123;</span><br><span class="line">		<span class="keyword">await</span> <span class="keyword">this</span>.where(&#123;id:data&#125;).delete();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="common_-_26gt_3B_config_-_26gt_3B_db-js__u4FEE_u6539db__u6587_u4EF6_u4FEE_u6539_uFF0C_u8FDE_u63A5_u6570_u636E_u5E93"><a href="#common_-_26gt_3B_config_-_26gt_3B_db-js__u4FEE_u6539db__u6587_u4EF6_u4FEE_u6539_uFF0C_u8FDE_u63A5_u6570_u636E_u5E93" class="headerlink" title="common -&gt; config -&gt; db.js 修改db  文件修改，连接数据库"></a>common -&gt; config -&gt; db.js 修改db  文件修改，连接数据库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  type: <span class="string">'mysql'</span>,</span><br><span class="line">  host: <span class="string">''</span>,		<span class="comment">//ip地址</span></span><br><span class="line">  port: <span class="string">'3306'</span>,</span><br><span class="line">  name: <span class="string">'weibo'</span>,		<span class="comment">//名称</span></span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  pwd: <span class="string">''</span>,		<span class="comment">//密码</span></span><br><span class="line">  prefix: <span class="string">'weibo_'</span>,	<span class="comment">//前缀名称</span></span><br><span class="line">  encoding: <span class="string">'utf8'</span>,</span><br><span class="line">  nums_per_page: <span class="number">10</span>,</span><br><span class="line">  log_sql: <span class="literal">true</span>,</span><br><span class="line">  log_connect: <span class="literal">true</span>,</span><br><span class="line">  cache: &#123;</span><br><span class="line">	on: <span class="literal">true</span>,</span><br><span class="line">	type: <span class="string">''</span>,</span><br><span class="line">	timeout: <span class="number">3600</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="u6570_u636E_u5E93_u76F8_u5173_u64CD_u4F5C"><a href="#u6570_u636E_u5E93_u76F8_u5173_u64CD_u4F5C" class="headerlink" title="数据库相关操作"></a>数据库相关操作</h3><ul>
<li>创建和db.js中<code>name</code>字段一样的数据库</li>
<li>增加相关表，表名称的前缀要和db.js中<code>prefix</code>字段相同</li>
<li>设计表<ul>
<li>增加<code>id</code>,int自动递增,主键</li>
<li>增加<code>user_name</code>,varchar</li>
<li>增加<code>text</code>,varchar</li>
<li>增加<code>user_id</code>,int </li>
<li>增加<code>date</code>,varchar</li>
</ul>
</li>
<li>sql语句如下：<ul>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Navicat MySQL Data Transfer</span><br><span class="line"></span><br><span class="line">Source Server         : my_site</span><br><span class="line">Source Server Version : 50628</span><br><span class="line">Source Host           : 123.**.**.***</span><br><span class="line">Source Database       : weibo</span><br><span class="line"></span><br><span class="line">Target Server Type    : MYSQL</span><br><span class="line">Target Server Version : 50628</span><br><span class="line">File Encoding         : 65001</span><br><span class="line"></span><br><span class="line">Date: 2015-12-01 </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for weibo_list</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `weibo_list`;</span><br><span class="line">CREATE TABLE `weibo_list` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_name` varchar(40) NOT NULL,</span><br><span class="line">  `text` varchar(280) NOT NULL,</span><br><span class="line">  `user_id` int(11) NOT NULL,</span><br><span class="line">  `date` varchar(40) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="u542F_u52A8_u9879_u76EE"><a href="#u542F_u52A8_u9879_u76EE" class="headerlink" title="启动项目"></a>启动项目</h3><ul>
<li>package.json同级目录下<code>npm install &amp;&amp; npm start</code></li>
<li>打开浏览器，访问<a href="http://127.0.0.1:8360/" target="_blank" rel="external">http://127.0.0.1:8360/</a></li>
</ul>
<h3 id="u5C55_u793A_u6548_u679C"><a href="#u5C55_u793A_u6548_u679C" class="headerlink" title="展示效果"></a>展示效果</h3><p><img lazy-src="https://o3o97s3zl.qnssl.com/20151201_weibo.png" alt="微博"></p>
<h3 id="u5E7F_u64AD_u3001_u5220_u9664_u5FAE_u535A"><a href="#u5E7F_u64AD_u3001_u5220_u9664_u5FAE_u535A" class="headerlink" title="广播、删除微博"></a>广播、删除微博</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*广播消息*/</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">	 type: <span class="string">'POST'</span>,</span><br><span class="line">	 url: <span class="string">'home/index/send'</span> ,</span><br><span class="line">	 data: &#123;</span><br><span class="line">		<span class="string">'user_name'</span>: $(<span class="string">'#userName'</span>).val(),</span><br><span class="line">		<span class="string">'user_id'</span>: $(<span class="string">'#face .current'</span>).index() + <span class="number">1</span>,</span><br><span class="line">		<span class="string">'text'</span>: $(<span class="string">'#conBox'</span>).val(),</span><br><span class="line">		 <span class="string">'date'</span>: new_date</span><br><span class="line">	 &#125; ,</span><br><span class="line">	 success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		...</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;);	</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除消息*/</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">	 type: <span class="string">'POST'</span>,</span><br><span class="line">	 url: <span class="string">'home/index/delete'</span> ,</span><br><span class="line">	 data: &#123;</span><br><span class="line">		<span class="string">'id'</span>: $(<span class="keyword">this</span>).parents(<span class="string">'li'</span>).attr(<span class="string">'list_id'</span>)</span><br><span class="line">	 &#125; ,</span><br><span class="line">	 success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		...</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="REST_API"><a href="#REST_API" class="headerlink" title="REST API"></a>REST API</h3><p>关于REST API,thinkJS 中提供了很便捷的方式，只需要判断请求方式，在控制器中增加对应的方法即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* send action</span><br><span class="line">* 发送消息</span><br><span class="line">* @return &#123;Promise&#125; []</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">async</span> sendAction() &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.isPost())&#123;</span><br><span class="line">	  <span class="keyword">await</span> <span class="keyword">this</span>.model(<span class="string">'list'</span>).addList(<span class="keyword">this</span>.post());</span><br><span class="line">	  <span class="keyword">this</span>.success();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>至此，大工告成，thinkJS开发起来是又快又爽，撸了个<code>微博</code>小练习连20分钟都到不了，当然，以上只是基础，更多好玩的好用的还要持续关注<code>文档</code>，最后再次感谢<code>thinkJS</code>与<code>成银</code>老师，源代码已放到我的<a href="https://github.com/liushaohua/Example/tree/master/thinkjs/demo01" target="_blank" rel="external">github</a>，欢迎大家参考。</p>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://thinkjs.org" target="_blank" rel="external">官方文档</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>玩过<code>Node</code>的同学对<code>Express</code>肯定不陌生，是TJ大神主刀开发的，今天咱们来说<code>下ThinkJS</code>，提到<code>ThinkPHP</code>各位同学肯定秒懂了，感谢<code>奇舞团</code>&amp;&amp;<code>成银老师</code>。</p>]]>
    
    </summary>
    
      <category term="ThinkJS" scheme="http://www.liushaohua.cn/tags/ThinkJS/"/>
    
      <category term="node.js" scheme="http://www.liushaohua.cn/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为你的网站升级HTTP/2]]></title>
    <link href="http://www.liushaohua.cn/2015/08/21/%E4%B8%BA%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8D%87%E7%BA%A7http-2/"/>
    <id>http://www.liushaohua.cn/2015/08/21/为你的网站升级http-2/</id>
    <published>2015-08-21T07:45:34.000Z</published>
    <updated>2016-02-14T07:45:28.827Z</updated>
    <content type="html"><![CDATA[<p>关于http/2被炒火已经有一段日子了，并且已经有许多站点争相追逐使用，今年5月终于定稿发布了，作为一个不热爱<code>学习</code>的前端狗，已经比那些热爱学习的大神们晚了好久，是时候<code>折腾</code>一下子了，不然<code>老了</code>是真的动不了了。<br>早些年Nginx发布了一个<code>early-alpha patch</code>模块来对HTTP/2进行支持，从1.9.5开始<code>ttpv2module</code> 替换了 <code>ngxhttpspdy_module</code> 正式全面的对HTTP/2支持。<br><a id="more"></a></p>
<h3 id="SSL_u90E8_u7F72"><a href="#SSL_u90E8_u7F72" class="headerlink" title="SSL部署"></a>SSL部署</h3><p>SSL有几款是免费的，生成证书后<code>listen 443</code>即可;</p>
<h3 id="u5B89_u88C5/_u5347_u7EA7Nginx"><a href="#u5B89_u88C5/_u5347_u7EA7Nginx" class="headerlink" title="安装/升级Nginx"></a>安装/升级Nginx</h3><p>如果你服务器的Nginx版本<code>太低</code>，必须要升级下<br>修改<code>/etc/yum.repos.d/nginx.repo</code>的nginx仓库地址<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo  </span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/  </span><br><span class="line">gpgcheck=0  </span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p>
<p>没安装Nginx的话 <code>yum install nginx</code>，已经安装了的话，就可以 <code>yum clean all &amp;&amp; yum update nginx</code>进行升级。</p>
<h3 id="u68C0_u6D4BNginx_u7248_u672C_u81F3_u5C11_u89811-9-5_u4EE5_u4E0A"><a href="#u68C0_u6D4BNginx_u7248_u672C_u81F3_u5C11_u89811-9-5_u4EE5_u4E0A" class="headerlink" title="检测Nginx版本至少要1.9.5以上"></a>检测Nginx版本至少要1.9.5以上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/<span class="number">1.9</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>
<h3 id="Nginx_u542F_u52A8"><a href="#Nginx_u542F_u52A8" class="headerlink" title="Nginx启动"></a>Nginx启动</h3><p>只需要修改<code>nginx.conf</code>中的配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;  </span><br><span class="line">  <span class="title">listen</span>        <span class="number">443</span> ssl http2; </span><br><span class="line">  <span class="title">server_name</span>   liushaohua.cn;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#SSL配置</span></span><br><span class="line">  <span class="title">ssl</span>                   <span class="built_in">on</span>;</span><br><span class="line">  <span class="title">ssl_certificate</span>       /etc/nginx/conf.d/certificate.crt;</span><br><span class="line">  <span class="title">ssl_certificate_key</span>   /etc/nginx/conf.d/certificate.key;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>listen 443 ssl http2</code></p>
<h3 id="u5F3A_u5236https"><a href="#u5F3A_u5236https" class="headerlink" title="强制https"></a>强制https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">if</span> (<span class="variable">$server_port</span> = <span class="number">80</span>) &#123;</span><br><span class="line">	<span class="title">rewrite</span><span class="regexp"> ^(.*)$</span> <span class="url">https://<span class="variable">$host</span><span class="variable">$1</span></span> <span class="built_in">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u91CD_u542F"><a href="#u91CD_u542F" class="headerlink" title="重启"></a>重启</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx -s reload</span><br><span class="line">netstat -apnt | grep 443</span><br></pre></td></tr></table></figure>
<p>如果显示为下面这样<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">tcp</span>        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0.0.0:443</span>             <span class="number">0.0.0.0</span>:*               LISTEN      <span class="number">7255</span>/nginx: master</span><br></pre></td></tr></table></figure></p>
<p>访问下你的网站，打开开发者工具，看看<code>Protocol</code>是否返回了h2,返回了的话就ok了~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于http/2被炒火已经有一段日子了，并且已经有许多站点争相追逐使用，今年5月终于定稿发布了，作为一个不热爱<code>学习</code>的前端狗，已经比那些热爱学习的大神们晚了好久，是时候<code>折腾</code>一下子了，不然<code>老了</code>是真的动不了了。<br>早些年Nginx发布了一个<code>early-alpha patch</code>模块来对HTTP/2进行支持，从1.9.5开始<code>ttpv2module</code> 替换了 <code>ngxhttpspdy_module</code> 正式全面的对HTTP/2支持。<br>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://www.liushaohua.cn/tags/HTTP/"/>
    
      <category term="Nginx" scheme="http://www.liushaohua.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[new一个hexo]]></title>
    <link href="http://www.liushaohua.cn/2015/07/12/new%E4%B8%80%E4%B8%AAhexo/"/>
    <id>http://www.liushaohua.cn/2015/07/12/new一个hexo/</id>
    <published>2015-07-12T01:28:43.000Z</published>
    <updated>2016-02-22T02:09:20.646Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;时隔多年，我终于又开始用个人网站了，记得当年第一次用的时候是2011年，为了找工作购买了域名<a href="http://www.hinlary.com" target="_blank" rel="external">www.hinlary.com</a>，还购买了廉价服务器,一个月也就10几20几块吧，当时只是放了静态页面上去，后续找到工作后就没有在用过，空间到期了懒得续了，域名到是续过2次就再没续过，随后也是过期了，后来又过了不知多久，闲来无事就注册了现在这个域名，买了个相对便宜的香港主机150一年，就在上面搭了WordPress写过几篇博文过了1年主机到期了又不了了之了，总之就是坚持不下来~14年左右吧看大家用github，我也跟风搞了一发，搭建了个github-page,随意放了点静态页面，也是懒的原因，浑浑噩噩的度过了15年，先后换了几台电脑，由DELL换成了mac，又换回了公司配的DELL，加上自己存放东西毫无规律，这么些年写的代码都找不到了，也是醉的不行了~桑不起的前端狗撒~~~  !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;时隔多年，我终于又开始用个人网站了，记得当年第一次用的时候是2011年，为了找工作购买了域名<a href="http://www.hinlary.com" target="_blank" rel="external">www.hinlary.com]]>
    </summary>
    
      <category term="hexo" scheme="http://www.liushaohua.cn/tags/hexo/"/>
    
      <category term="个人随笔" scheme="http://www.liushaohua.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World test]]></title>
    <link href="http://www.liushaohua.cn/2015/07/01/hello-world/"/>
    <id>http://www.liushaohua.cn/2015/07/01/hello-world/</id>
    <published>2015-07-01T06:13:51.000Z</published>
    <updated>2016-01-31T01:21:11.218Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7下安装mysql]]></title>
    <link href="http://www.liushaohua.cn/2015/04/12/centos7%E4%B8%8B%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://www.liushaohua.cn/2015/04/12/centos7下安装mysql/</id>
    <published>2015-04-12T03:13:45.000Z</published>
    <updated>2016-02-04T05:09:38.197Z</updated>
    <content type="html"><![CDATA[<p>我在我笔记本中安装了<code>mysql</code>，而我的远程服务上还没安装，身为一个小白，要多折腾一下。<br><a id="more"></a><br>由于我服务器的系统是<code>CentOS7</code>，而CentOS7的yum源中貌似没有正常安装mysql时的<code>mysql-sever</code>文件，需要去官网上下载。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-<span class="number">5</span>.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-<span class="number">5</span>.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<h2 id="u8BA9MySQL_u670D_u52A1_u5668_u88AB_u8FDC_u7A0B_u8BBF_u95EE"><a href="#u8BA9MySQL_u670D_u52A1_u5668_u88AB_u8FDC_u7A0B_u8BBF_u95EE" class="headerlink" title="让MySQL服务器被远程访问"></a>让MySQL服务器被远程访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//在本机登入mysql后，更改<span class="string">"mysql"</span>数据库里的<span class="string">"user"</span>表里的<span class="string">"host"</span>项，从<span class="string">"localhost"</span>改为<span class="string">"%"</span>。</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;select <span class="string">'host'</span> from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">//查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user =<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">//如果报错：ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">'%-root'</span> <span class="keyword">for</span> key <span class="string">'PRIMARY'</span></span><br><span class="line"></span><br><span class="line">select host from user <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line">//查看一下host是否已经有了%这个值</span><br><span class="line"></span><br><span class="line">+--------------+------+</span><br><span class="line">| host         | user |</span><br><span class="line">+--------------+------+</span><br><span class="line">| %            | root |</span><br><span class="line">| <span class="number">127.0</span>.<span class="number">0.1</span>    | root |</span><br><span class="line">| ::<span class="number">1</span>          | root |</span><br><span class="line">| iz25zf7cpbkz | root |</span><br><span class="line">+--------------+------+</span><br><span class="line"></span><br><span class="line">//如果有了直接执行下面的flush privileges;即可</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;select host,user from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt;quit</span><br></pre></td></tr></table></figure>
<p>然后就可以愉快的去玩耍了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我在我笔记本中安装了<code>mysql</code>，而我的远程服务上还没安装，身为一个小白，要多折腾一下。<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.liushaohua.cn/tags/Linux/"/>
    
      <category term="mysql" scheme="http://www.liushaohua.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给你的markdown产出图片增加lazy]]></title>
    <link href="http://www.liushaohua.cn/2015/04/10/markdown/"/>
    <id>http://www.liushaohua.cn/2015/04/10/markdown/</id>
    <published>2015-04-10T07:32:34.000Z</published>
    <updated>2016-04-07T09:32:58.334Z</updated>
    <content type="html"><![CDATA[<p>Markdown 其实是一种轻量级的标记语言，使用过Markdown的人都会赞不绝口，Hexo和Ghost都支持用Markdown语法编写文章。<br><a id="more"></a><br>我的博客用的是hexo,试用Markdown语法插入一张图片很方便，只需要<code>![弥撒13](https://o3o97s3zl.qnssl.com/misa13.jpg?imageView2/2/w/800/q/90)</code>就可以了，解析后会给我们创建一个<code>&lt;img src=&quot;https://o3o97s3zl.qnssl.com/misa13.jpg?imageView2/2/w/800/q/90&quot; alt=&quot;弥撒13&quot;</code>,如果我们想增加一个width或者其他的class就不支持了，要么我们就更换其他引擎，要么就修改一下源代码，为了方便起见，我选择了第二个。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd node_modules/hexo-renderer-marked/node_modules/marked/lib</span><br><span class="line">vi marked.js 找到<span class="number">890</span>行，修改下img标签这</span><br><span class="line">Renderer.prototype.image = <span class="function"><span class="keyword">function</span>(<span class="params">href, title, text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out = <span class="string">'&lt;img lazy-src="'</span> + href + <span class="string">'" alt="'</span> + text + <span class="string">'"'</span>;</span><br><span class="line">  <span class="keyword">if</span> (title) &#123;</span><br><span class="line">    out += <span class="string">' title="'</span> + title + <span class="string">'"'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  out += <span class="keyword">this</span>.options.xhtml ? <span class="string">'/&gt;'</span> : <span class="string">'&gt;'</span>;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Renderer.prototype.text = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>ok~ 搞定，如果要修改其他的语法的话也在这个JS文件中改一笔就完事了~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdown 其实是一种轻量级的标记语言，使用过Markdown的人都会赞不绝口，Hexo和Ghost都支持用Markdown语法编写文章。<br>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://www.liushaohua.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[express4.x体验]]></title>
    <link href="http://www.liushaohua.cn/2015/04/02/express4-x%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.liushaohua.cn/2015/04/02/express4-x体验/</id>
    <published>2015-04-02T02:04:36.000Z</published>
    <updated>2016-02-02T02:33:05.394Z</updated>
    <content type="html"><![CDATA[<p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>
<a id="more"></a>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express</span><br><span class="line">npm install -g express-generator</span><br><span class="line">express myBlog</span><br><span class="line">cd myBlog &amp;&amp; npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>npm start 之后就跑起来了，打开浏览器localhost 3000端口 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a></p>
<ul>
<li><p>常用的express函数</p>
<ul>
<li><code>res.redirect(&#39;/&#39;)</code>; 重定向</li>
<li><code>express -e myblog</code> 创建博客的时候使用ejs 默认为jade</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/reg'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"> 　　<span class="keyword">var</span> userName = req.body.username;   <span class="comment">//获取post后页面内的name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>var session = require(&#39;express-session&#39;);</code>     //引入session  </p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用session</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">	secret: <span class="string">'myblog'</span>,</span><br><span class="line">	resave: <span class="literal">false</span>,</span><br><span class="line">	saveUninitialized: <span class="literal">false</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>app.use(flash());</code>  //使用flash  </p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">	res.locals.error = req.flash(<span class="string">'error'</span>).toString() || <span class="string">""</span>;</span><br><span class="line">	res.locals.success = req.flash(<span class="string">'success'</span>).toString() || <span class="string">""</span>;</span><br><span class="line">	res.locals.title = <span class="string">""</span>;</span><br><span class="line">	res.locals.count = <span class="number">0</span>;</span><br><span class="line">	res.locals.pageNum= <span class="number">0</span>;</span><br><span class="line">	res.locals.pageSize= <span class="number">0</span>;</span><br><span class="line">	res.locals.totalPage= <span class="number">0</span>;</span><br><span class="line">	res.locals.keyword=<span class="string">''</span>;</span><br><span class="line">	res.locals.user = req.session.user;</span><br><span class="line">	next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//app.locals：这是一个函数对象，可以给它增加新的属性。程序内所有页面模板都能访问这个对象，所以可以用它保存全局配置变量供页面模板使用。</span></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">&lt;%=title%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">%=error%</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>再看下app.js      </p>
<ul>
<li><p>1.app.set(name,value)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把名字为name的项的值设为value，用于设置参数</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line"><span class="comment">//设置了模版文件夹的路径；主要清楚__dirname的意思就可以了，它是node.js中的全局变量，表示取当前执行文件的路径</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);  <span class="comment">//设置使用的模版引擎，我们使用的ejs</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.app.use([path], function)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用这个方法来使用中间件，因为express依赖于connect，有大量的中间件，可以通过app.use来使用；</span></span><br><span class="line"><span class="comment">//path参数可以不填，默认为'/' (项目中用到的就不分别解释了，用到的时候自已查一API的中间件部分)</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>))); </span><br><span class="line"><span class="comment">//这一句中可能要注意一下，express.static( )是处理静态请求的，设置了public文件，</span></span><br><span class="line"><span class="comment">//public下所有文件都会以静态资料文件形式返回（如样式、脚本、图片素材等文件）</span></span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, routes);app.use(<span class="string">'/users'</span>, users);</span><br><span class="line"><span class="comment">//上面代码表示当用户使用/访问时，调用routes，即routes目录下的index.js文件，</span></span><br><span class="line"><span class="comment">//其中.js后缀省略，用/users访问时，调用routes目录下users.js文件</span></span><br><span class="line"><span class="comment">//这就是为什么，我们示例中用http://localhost:8100/访问时候，</span></span><br><span class="line"><span class="comment">//修改的index.js里的文件代码可以执行（当然index.js文件中也要写对应的代码，才能是我们最终看到的效果）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.app.get(name)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取名为name的项的值</span><br><span class="line"><span class="keyword">if</span> (app.get(<span class="string">'env'</span>) === <span class="string">'development'</span>) &#123; </span><br><span class="line">	app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123; </span><br><span class="line">		res.status(err.status || <span class="number">500</span>); </span><br><span class="line">		res.render(<span class="string">'error'</span>, &#123; message: err.message, error: err &#125;); </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">　　表示如果是开发环境，处理error时会输出堆栈信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.路由文件index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">主要看下面这段代码</span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; </span><br><span class="line">	res.render(<span class="string">'index'</span>, &#123; </span><br><span class="line">		title: <span class="string">'&lt;h1&gt;Express&lt;/h1&gt;'</span> ,</span><br><span class="line">		users:[</span><br><span class="line">				&#123;username: <span class="string">'Wilson'</span>&#125;,</span><br><span class="line">				&#123;username: <span class="string">'Wilson Zhong'</span>&#125;, </span><br><span class="line">				&#123;username: <span class="string">'Zhong Wei'</span>&#125;</span><br><span class="line">		] </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//这段表示，router.get表示通过get请求/时，响应后面的function处理，两个参数分别是request、response；</span></span><br><span class="line"><span class="comment">//res.render表示调用模版引擎解析名字index的模板，传并传入了title和users两个对象做为参数；</span></span><br><span class="line"><span class="comment">//为什么它会知道解板views目录下的index.ejs?而不是其它目录下的文件，或者后其它后缀名的文件？</span></span><br><span class="line"><span class="comment">//原因就是app.js中的设置：</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line"><span class="comment">//而这两个参数在index.ejs中可以使用，那么加上ejs的部分，就会返回最终生成的页面展现！</span></span><br><span class="line"><span class="comment">//res.send("req.host获取主机名，req.path获取请求路径名!");</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>5.获取url参数 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">url：http:<span class="comment">//localhost:8888/select?name=a&amp;id=5</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123; </span><br><span class="line">	<span class="keyword">var</span> pathname = url.parse(request.url).pathname;  <span class="comment">//pathname =&gt; select </span></span><br><span class="line">	   </span><br><span class="line">	<span class="keyword">var</span> arg = url.parse(request.url).query;          <span class="comment">//arg =&gt; name=a&amp;id=5 </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + arg ); </span><br><span class="line">	<span class="keyword">var</span> str = querystring.parse(arg);                <span class="comment">//str=&gt; &#123;name:'a',id:'5'&#125; </span></span><br><span class="line">	   </span><br><span class="line">	<span class="keyword">var</span> arg1 = url.parse(request.url, <span class="literal">true</span>).query;   <span class="comment">//arg1 =&gt; &#123;name:'a',id:'5'&#125; </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + arg1 ); </span><br><span class="line">	   </span><br><span class="line">	<span class="keyword">var</span> name = querystring.parse(arg).name;         <span class="comment">//name =&gt; a </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"name = "</span>+name); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>); </span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>]]>
    
    </summary>
    
      <category term="express" scheme="http://www.liushaohua.cn/tags/express/"/>
    
      <category term="node.js" scheme="http://www.liushaohua.cn/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式]]></title>
    <link href="http://www.liushaohua.cn/2014/06/01/JavascripDesignPatterns/"/>
    <id>http://www.liushaohua.cn/2014/06/01/JavascripDesignPatterns/</id>
    <published>2014-06-01T02:24:06.000Z</published>
    <updated>2016-04-25T02:31:39.316Z</updated>
    <content type="html"><![CDATA[<p>JavaScript中国的设计模式</p>
<a id="more"></a>
<h3 id="u5355_u4F8B_u6A21_u5F0F"><a href="#u5355_u4F8B_u6A21_u5F0F" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 登录弹窗</span><br><span class="line"> * 惰性单例</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!div) &#123;</span><br><span class="line">            div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            div.innerHTML = <span class="string">'我是登录浮窗'</span>;</span><br><span class="line">            div.style.display = <span class="string">'none'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> div;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> loginLayer = createLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">* 通用单例</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="string">'im loginWindow'</span>;</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">*   实例 动态只增加一次点击⌚️</span><br><span class="line">*</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bindEvent = getSingle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>).click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    bindEvent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line">render();</span><br><span class="line">render();</span><br></pre></td></tr></table></figure>
<h3 id="u8FED_u4EE3_u5668_u6A21_u5F0F"><a href="#u8FED_u4EE3_u5668_u6A21_u5F0F" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 迭代器模式是一种相对简单的模式，可以减少逻辑分之判断，直接上代码</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getActiveUploadObj =&gt; () &#123; <span class="comment">//IE上传控件</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">	 <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'TXFTNActive.FTNupload'</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">	 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getFlashUploadObj =&gt; () &#123;  <span class="comment">//supportFlash flash上传</span></span><br><span class="line"> <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">	 <span class="keyword">let</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</span><br><span class="line">	 <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getFormUpladObj =&gt; () &#123;    <span class="comment">//表单上传</span></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">'input name="file" type="file" class="ui-file"/&gt;'</span>;</span><br><span class="line"> <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iteratorUploadObj =&gt; () &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>,fn; fn = <span class="built_in">arguments</span>[i++];) &#123;</span><br><span class="line">	 <span class="keyword">let</span> uploadObj = fn();</span><br><span class="line">	 <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">		 <span class="keyword">return</span> uploadObj;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUpladObj);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript中国的设计模式</p>]]>
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://www.liushaohua.cn/tags/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node学习笔记-Tcp]]></title>
    <link href="http://www.liushaohua.cn/2014/04/12/node-tcp/"/>
    <id>http://www.liushaohua.cn/2014/04/12/node-tcp/</id>
    <published>2014-04-12T07:37:23.000Z</published>
    <updated>2016-03-14T10:52:28.408Z</updated>
    <content type="html"><![CDATA[<h3 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h3><p>在浏览器中通过http仅能实现单向的通信，但如果想做实时通讯，我们应该怎么搞？大家的脑海里的第一印象是不是<code>WebSocket</code>or <code>Socket.io</code>，区别于 HTTP 服务器以 HTTP 为通讯协议， 实时服务器一般采用较为底层的 TCP/IP 为协议通讯，实现了“套字节 Socket”的双向机制，接下来咱们就具体实践下。<br><a id="more"></a></p>
<h3 id="u5173_u4E8ETCP"><a href="#u5173_u4E8ETCP" class="headerlink" title="关于TCP"></a>关于TCP</h3><ul>
<li><code>TPC/IP</code>协议是传输层协议，主要解决数据如何在网络中传输</li>
<li>TCP分层模型<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
</li>
<li>让数据进行计算机间传输</li>
<li>传输前要经过三次握手 才能发射数据</li>
<li>当会话过程中，双方都提供一个套接字 socket. 实现客户端和服务器端的连接</li>
<li>socket可读可写的一个流</li>
</ul>
<h3 id="u5B83_u80FD_u505A_u4EC0_u4E48"><a href="#u5B83_u80FD_u505A_u4EC0_u4E48" class="headerlink" title="它能做什么"></a>它能做什么</h3><p>Nodejs提供了<code>net</code>模块给我们，可用于创建Socket服务器或Socket客户端。NodeJS 的数据通信，最基础的两个模块是 Net 和 Http，前者是基于 Tcp 的封装，后者本质还是 Tcp 层，只不过做了比较多的数据封装，我们视为表现层</p>
<h3 id="u5EFA_u7ACB_u4E00_u4E2ATcp_u670D_u52A1_u5668"><a href="#u5EFA_u7ACB_u4E00_u4E2ATcp_u670D_u52A1_u5668" class="headerlink" title="建立一个Tcp服务器"></a>建立一个<code>Tcp</code>服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  net = <span class="built_in">require</span>(<span class="string">'net'</span>),</span><br><span class="line">     fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">     ws = fs.createWriteStream(<span class="string">'tcp.log'</span>);</span><br><span class="line"><span class="keyword">var</span>  server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(socket.address());</span><br><span class="line">     socket.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">	</span><br><span class="line">  	 server.on(<span class="string">'listening'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	   <span class="built_in">console</span>.log(<span class="string">'Server is listening on port'</span>);</span><br><span class="line">	 &#125;);</span><br><span class="line">	</span><br><span class="line">     socket.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chunk);</span><br><span class="line">        ws.write(chunk);</span><br><span class="line">     &#125;);</span><br><span class="line">	</span><br><span class="line">     socket.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     socket.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'close'</span>);</span><br><span class="line">        socket.destroy();</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="u8BBF_u95EE_u670D_u52A1_u5668"><a href="#u8BBF_u95EE_u670D_u52A1_u5668" class="headerlink" title="访问服务器"></a>访问服务器</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 8080</span><br></pre></td></tr></table></figure>
<p>建立连接后，得到一个socket对象作为回调中的参数，我们可以操作这个socket对象，前面提到过tcp连接的对象是可读可写的流。作为一个流对象，因此能够监听data,end等事件；作为一个可写流，具有write()方法。</p>
<h3 id="u521B_u5EFA_u4E00_u4E2A_u7B80_u5355_u804A_u5929_u670D_u52A1_u5668"><a href="#u521B_u5EFA_u4E00_u4E2A_u7B80_u5355_u804A_u5929_u670D_u52A1_u5668" class="headerlink" title="创建一个简单聊天服务器"></a>创建一个简单聊天服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>),</span><br><span class="line">	clients = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> name;</span><br><span class="line">	socket.write(<span class="string">'欢迎来到聊天室，请设置昵称:'</span>);</span><br><span class="line">	</span><br><span class="line">	socket.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (name) &#123;</span><br><span class="line">			sendMsg(name.toString() + chunk.toString());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (clients[chunk]) &#123;</span><br><span class="line">				socket.write(<span class="string">'用户名被占用，请更换用户名'</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				name = chunk;</span><br><span class="line">				clients[chunk] = socket;</span><br><span class="line">				sendMsg(<span class="string">'SYSTEM:'</span>+chunk+<span class="string">'来到聊天室，我们欢迎他'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	socket.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">delete</span> clients[name];</span><br><span class="line">		socket.destroy();</span><br><span class="line">		sendMsg(<span class="string">'SYSTEM:'</span>+name+<span class="string">'离开了'</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> e <span class="keyword">in</span> clients) &#123;</span><br><span class="line">		clients[e].write(msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>短短几行代码就搞定了，看上去也比较简单，<code>data</code>的时候判断有没有用户名，有的话并且没有重复就输出，把<code>socket</code>对象缓存并广播所有人，当然只是入门的简版，还需要增加判断是不是本人以及<code>error</code>和<code>close</code>相关，大家可以自行补充哈~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h3><p>在浏览器中通过http仅能实现单向的通信，但如果想做实时通讯，我们应该怎么搞？大家的脑海里的第一印象是不是<code>WebSocket</code>or <code>Socket.io</code>，区别于 HTTP 服务器以 HTTP 为通讯协议， 实时服务器一般采用较为底层的 TCP/IP 为协议通讯，实现了“套字节 Socket”的双向机制，接下来咱们就具体实践下。<br>]]>
    
    </summary>
    
      <category term="Tcp" scheme="http://www.liushaohua.cn/tags/Tcp/"/>
    
      <category term="node.js" scheme="http://www.liushaohua.cn/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node学习笔记-Stream]]></title>
    <link href="http://www.liushaohua.cn/2014/04/11/node-stream/"/>
    <id>http://www.liushaohua.cn/2014/04/11/node-stream/</id>
    <published>2014-04-11T01:55:25.000Z</published>
    <updated>2016-02-22T07:24:23.294Z</updated>
    <content type="html"><![CDATA[<p>在Node的使用中，我们会频繁的接触到<code>Stream</code>,并且内建stream模块已经被多个Node核心模块使用，同时也可以被用户自定义的模块使用。<code>Stream</code>到底是什么，用来做什么，最近查阅了写资料并进行了整理，简单总结下供自己查阅。</p>
<a id="more"></a>
<h3 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h3><p><a href="http://nodeapi.ucdok.com/#/api/stream.html" target="_blank" rel="external">官方文档</a>上是这么说的：<code>流是一个抽象接口，被 Node 中的很多对象所实现。比如对一个 HTTP 服务器的请求是一个流，stdout 也是一个流。流是可读、可写或兼具两者的。所有流都是 EventEmitter 的实例。</code> 流又包括四类流， <code>Readable</code> 流、<code>Writable</code> 流、<code>Duplex</code> 流和<code>Transform</code>流，具体的异同会在下文中说到.</p>
<h3 id="u6D41_u7684_u7528_u9014"><a href="#u6D41_u7684_u7528_u9014" class="headerlink" title="流的用途"></a>流的用途</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    fs.readFile(__dirname + <span class="string">'/data.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码没什么问题,每次请求我们都会把整个data.txt文件读入到内存中，然后把结果返回客户端，但是通常大文件的一次读取和大量用户的高并发都会占用很大的内存，而<code>流</code>则可以分段读取，方便粗暴，大大的方便了我们。</p>
<h3 id="u5982_u4F55_u4F7F_u7528"><a href="#u5982_u4F55_u4F7F_u7528" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 流的分类</span><br><span class="line"> * 可读流 可以从中流出字节内容</span><br><span class="line"> * 可写流 可以把字节写入流中</span><br><span class="line"> * 继承 Readable</span><br><span class="line"> * 继承 EventEmitter</span><br><span class="line"> * @type &#123;exports|module.exports&#125;</span><br><span class="line"> **/</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Readable</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    rs = fs.createReadStream(<span class="string">'data.txt'</span>);</span><br><span class="line">	</span><br><span class="line">rs.on(<span class="string">'open'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开文件'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有当监听了data事件之后才开始真正读取，不监听的话下面的其他方法`end`,'close','error'自然也不会触发</span></span><br><span class="line">rs.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//console.log('操作');</span></span><br><span class="line">    rs.pause();<span class="comment">//等待操作完成          暂停流的发射事件 关掉开关</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'操作完成'</span>);</span><br><span class="line">        rs.resume();<span class="comment">//再次执行操作     重新开始恢复 读取 打开开关</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">rs.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件内容读取完毕'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">rs.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件关闭'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">rs.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="u5927_u5BB6_u53EF_u4EE5_u770B_u51FA_u6765_uFF0CReadable_u6D41_u6709_u4EE5_u4E0B_u51E0_u4E2A_u4E8B_u4EF6_uFF1A"><a href="#u5927_u5BB6_u53EF_u4EE5_u770B_u51FA_u6765_uFF0CReadable_u6D41_u6709_u4EE5_u4E0B_u51E0_u4E2A_u4E8B_u4EF6_uFF1A" class="headerlink" title="大家可以看出来，Readable流有以下几个事件："></a>大家可以看出来，<code>Readable</code>流有以下几个事件：</h3><ul>
<li>当一个数据块可以从流中被读出时，它会触发一个 <code>readable</code> 事件</li>
<li><code>data</code>事件 - 数据正在传递时，触发该事件（以chunk数据块为对象）</li>
<li><code>end</code>事件 - 数据传递完成后，会触发该事件。</li>
<li><code>close</code>事件 - 当底层数据源（比如，源头的文件描述符）被关闭时触发。并不是所有流都会触发这个事件。</li>
<li><code>error</code>事件 - 数据接收异常时，会触发该事件</li>
</ul>
<h3 id="u65B9_u4FBF_u7684API"><a href="#u65B9_u4FBF_u7684API" class="headerlink" title="方便的API"></a>方便的API</h3><p>Node还给我提供了简洁的API，供我们使用，而且<code>req</code>,<code>res</code>参数都是流对象,读文件的代码我们就可以调整下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stream = fs.createReadStream(__dirname + <span class="string">'/data.txt'</span>);</span><br><span class="line">    stream.pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>.pipe</code>方法会自动帮助我们监听data和end事件。上面的这段代码不仅简洁，而且<code>data.txt</code>文件中每一小段数据都将源源不断的发送到客户端。<br>除此之外，使用<code>.pipe()</code>方法还有别的好处，比如说它可以自动控制后端压力，以便在客户端连接缓慢的时候node可以将尽可能少的缓存放到内存中。</p>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p>readable.pipe(destination, [options])</p>
<ul>
<li>实现流的输入和输出功能</li>
<li>destination {Writable Stream} 写入数据的目标</li>
<li>options {Object} 导流选项</li>
<li>end {Boolean} 在读取者结束时结束写入者。缺省为 true</li>
</ul>
<h3 id="Stream_u4E2D_u76844_u5927_u5929_u738B"><a href="#Stream_u4E2D_u76844_u5927_u5929_u738B" class="headerlink" title="Stream中的4大天王"></a>Stream中的4大<code>天王</code></h3><table>
<thead>
<tr>
<th>类</th>
<th style="text-align:center">使用场景</th>
<th style="text-align:right">实现的方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>Readable</td>
<td style="text-align:center">只读</td>
<td style="text-align:right">_read</td>
</tr>
<tr>
<td>Writable</td>
<td style="text-align:center">只写</td>
<td style="text-align:right">_write</td>
</tr>
<tr>
<td>Duplex</td>
<td style="text-align:center">读写</td>
<td style="text-align:right">_read,_write</td>
</tr>
<tr>
<td>Transform</td>
<td style="text-align:center">操作被写入的数据，然后读出结果</td>
<td style="text-align:right">_transform,flush</td>
</tr>
</tbody>
</table>
<ul>
<li><p>Readable流（可读流）介绍</p>
<ul>
<li>Readable（可读）流接口是对您正在读取的数据的来源的抽象。换言之，数据出自一个可读流。</li>
<li>Readable 流有两种“模式”：流动模式和暂停模式。</li>
<li>当处于流动模式时，数据由底层系统读出，并尽可能快地提供给您的程序；当处于暂停模式时，您必须明确地调用 stream.read() 来取出若干数据块。流默认处于暂停模式。</li>
<li>Readable流拥有的事件，已经在<code>本文的开始</code>介绍过了。</li>
</ul>
</li>
<li><p>Writable流（可写流）介绍    </p>
<ul>
<li>Writable（可写）流接口是对写入数据的目标的抽象。</li>
<li><code>write()</code>方法 该方法向底层系统写入数据，并在数据被处理完毕后调用所给的回调。</li>
<li><code>end()</code>方法 当不再写入数据时，调用该方法，停止写入。</li>
</ul>
</li>
<li><p>Duplex(双工流) 介绍</p>
<ul>
<li>Duplex（可读写）流同时兼具可读和可写特性，比如一个 TCP 嵌套字连接。</li>
<li>值得注意的是，stream.Duplex 是一个可以像 Readable 或 Writable 一样被扩充、实现了底层方法 _read(sise) 和 _write(chunk, encoding, callback) 的抽象类</li>
</ul>
</li>
<li><p>Transform（转换流）介绍</p>
<ul>
<li>“转换”（transform）流实际上是一个输出与输入存在因果关系的双工流，比如 zlib 流或 crypto 流。</li>
<li>输入和输出并无要求相同大小、相同块数或同时到达。举个例子，一个 Hash 流只会在输入结束时产生一个数据块的输出；一个 zlib 流会产生比输入小得多或大得多的输出。</li>
</ul>
</li>
</ul>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://nodeapi.ucdok.com/api/" target="_blank" rel="external">NodeAPI</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Node的使用中，我们会频繁的接触到<code>Stream</code>,并且内建stream模块已经被多个Node核心模块使用，同时也可以被用户自定义的模块使用。<code>Stream</code>到底是什么，用来做什么，最近查阅了写资料并进行了整理，简单总结下供自己查阅。</p>]]>
    
    </summary>
    
      <category term="Stream" scheme="http://www.liushaohua.cn/tags/Stream/"/>
    
      <category term="node.js" scheme="http://www.liushaohua.cn/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node学习笔记-Path]]></title>
    <link href="http://www.liushaohua.cn/2014/04/10/node-path/"/>
    <id>http://www.liushaohua.cn/2014/04/10/node-path/</id>
    <published>2014-04-10T06:39:21.000Z</published>
    <updated>2016-02-29T10:07:28.147Z</updated>
    <content type="html"><![CDATA[<p>用过<code>世界上最好的语言</code>的同学一定对<code>pathinfo()</code>这个函数比较熟悉，它是检查文件路径相关的<code>API</code>，说起<code>PHP</code>的内置函数，据说有500多个，也是多的<code>不要不要</code>的了，但是功能强大，极大的增加了我们的开发便利，但我们今天的主题不是<code>PHP</code>，我们来聊下<code>Node</code>的<code>Path</code>。<br><a id="more"></a></p>
<h3 id="u8DEF_u5F84__28Path_29"><a href="#u8DEF_u5F84__28Path_29" class="headerlink" title="路径 (Path)"></a>路径 (Path)</h3><ul>
<li>path.normalize(p)</li>
<li>path.join([path1], [path2], […])</li>
<li>path.resolve([from …], to)</li>
<li>path.isAbsolute(path)</li>
<li>path.relative(from, to)</li>
<li>path.dirname(p)</li>
<li>path.basename(p, [ext])</li>
<li>path.extname(p)</li>
<li>path.sep</li>
<li>path.delimiter</li>
</ul>
<p><code>Path</code>是<code>Node</code>中内置的路径处理模块，通过 require(‘path’) 来加载此模块，我们逐一介绍下各个方法的用途。</p>
<h3 id="path-normalize_28p_29"><a href="#path-normalize_28p_29" class="headerlink" title="path.normalize(p)"></a>path.normalize(p)</h3><ul>
<li>normalize(正常)，将非标准路径转化为标准路径</li>
<li>解析 . <code>当前目录</code> .. <code>上级目录</code> </li>
<li>多个杠转成一个杠</li>
<li>兼容多平台 windows linux<code>\ /</code></li>
<li>如果是斜杠结尾，则保留<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.normalize(<span class="string">'./../a////b//d//../c//e//'</span>)</span><br><span class="line">..\a\b\c\e\</span><br><span class="line"></span><br><span class="line">path.normalize(<span class="string">'/foo/bar//baz/asdf/quux/..'</span>)</span><br><span class="line"><span class="string">'/foo/bar/baz/asdf'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="path-join_28_5Bpath1_5D_2C__5Bpath2_5D_2C__5B_u2026_5D_29"><a href="#path-join_28_5Bpath1_5D_2C__5Bpath2_5D_2C__5B_u2026_5D_29" class="headerlink" title="path.join([path1], [path2], […])"></a>path.join([path1], [path2], […])</h3><ul>
<li>连接所有参数, 并且规范化得到的路径<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(__dirname,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'..'</span>,<span class="string">'c'</span>)</span><br><span class="line">E:\node\lectures\<span class="number">10.</span>path\a\c</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="path-resolve_28_5Bfrom__u2026_5D_2C_to_29"><a href="#path-resolve_28_5Bfrom__u2026_5D_2C_to_29" class="headerlink" title="path.resolve([from …], to)"></a>path.resolve([from …], to)</h3><ul>
<li>以应用程序根目录为起点，根据参数的值解析出一个绝对路径</li>
<li>以应用程序根目录为起点</li>
<li>普通字符串代表当前目录的下一级目录</li>
<li>/代表盘符根目录</li>
<li>没有下一个参数，返回当前路径</li>
<li>另一种思路, 是把它看做一系列 cd 命令<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'/a'</span>,<span class="string">'..'</span>,<span class="string">'b'</span>,<span class="string">'msg'</span>,<span class="string">'a.txt'</span>)</span><br><span class="line">e:\b\msg</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(&#39;/a&#39;,&#39;..&#39;,&#39;b&#39;,&#39;msg&#39;,&#39;a.txt&#39;)&#10;cd /a &#10;cd ..&#10;cd b/&#10;cd msg&#10;pwd /b/msg</span><br></pre></td></tr></table></figure>
<h3 id="path-isAbsolute_28path_29"><a href="#path-isAbsolute_28path_29" class="headerlink" title="path.isAbsolute(path)"></a>path.isAbsolute(path)</h3><ul>
<li>判断是否绝对路径<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path.isAbsolute(<span class="string">'/foo/bar'</span>)  <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'/opt/..'</span>)   <span class="comment">// true</span></span><br><span class="line">   path.isAbsolute(<span class="string">'web/'</span>);     <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="path-relative_28from_2C_to_29"><a href="#path-relative_28from_2C_to_29" class="headerlink" title="path.relative(from, to)"></a>path.relative(from, to)</h3><ul>
<li>解析从from到to的相对路径</li>
<li>返回的是在第一个路径里，如何用相对路径 去引用第二个路径<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- a</span><br><span class="line">	index.js</span><br><span class="line">- b</span><br><span class="line">	c.js</span><br><span class="line">	</span><br><span class="line">path.relative(<span class="string">'a'</span>,<span class="string">'b/c.js'</span>)</span><br><span class="line">b/c.js</span><br><span class="line"></span><br><span class="line">path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>)</span><br><span class="line">   ../../impl/bbb<span class="string">'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="path-dirname_28p_29"><a href="#path-dirname_28p_29" class="headerlink" title="path.dirname(p)"></a>path.dirname(p)</h3><ul>
<li>获取路径所属的目录</li>
<li>目录的话 返回上一级目录</li>
<li>如果是文件 返回此文件所属的目录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.dirname(__dirname)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="path-basename_28p_2C__5Bext_5D_29"><a href="#path-basename_28p_2C__5Bext_5D_29" class="headerlink" title="path.basename(p, [ext])"></a>path.basename(p, [ext])</h1><ul>
<li>返回指定的文件名，返回结果可排除[ext]后缀字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件名带后缀：'</span>+path.basename(p));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件名不带后缀：'</span>+path.basename(p, <span class="string">'.html'</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="path-extname_28p_29"><a href="#path-extname_28p_29" class="headerlink" title="path.extname(p)"></a>path.extname(p)</h3><ul>
<li>获取文件的扩展名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.extname(<span class="string">'a/b/index.js'</span>)</span><br><span class="line"><span class="comment">//.js</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="path-sep"><a href="#path-sep" class="headerlink" title="path.sep"></a>path.sep</h2><ul>
<li>路径分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(path.sep); <span class="comment">// '/'或'\’</span></span><br><span class="line"><span class="built_in">console</span>.log(path_str.split(path.sep)); <span class="comment">// [ '', 'home', 'lee', 'works', 'nodejs', 'study12', 'index.html' ]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="path-delimiter"><a href="#path-delimiter" class="headerlink" title="path.delimiter"></a>path.delimiter</h2><ul>
<li>环境变量分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(path.delimiter); <span class="comment">//一般linux是'：'，windows是';'</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.PATH); <span class="comment">//打印环境变量path</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.PATH.split(path.delimiter)) <span class="comment">//用path.delimiter分割</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>用过<code>世界上最好的语言</code>的同学一定对<code>pathinfo()</code>这个函数比较熟悉，它是检查文件路径相关的<code>API</code>，说起<code>PHP</code>的内置函数，据说有500多个，也是多的<code>不要不要</code>的了，但是功能强大，极大的增加了我们的开发便利，但我们今天的主题不是<code>PHP</code>，我们来聊下<code>Node</code>的<code>Path</code>。<br>]]>
    
    </summary>
    
      <category term="Path" scheme="http://www.liushaohua.cn/tags/Path/"/>
    
      <category term="node.js" scheme="http://www.liushaohua.cn/tags/node-js/"/>
    
  </entry>
  
</feed>
