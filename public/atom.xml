<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[厘澄的小站]]></title>
  <subtitle><![CDATA[厘澄的小站]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.liushaohua.cn/"/>
  <updated>2016-01-31T04:46:23.931Z</updated>
  <id>http://www.liushaohua.cn/</id>
  
  <author>
    <name><![CDATA[厘澄]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[纪念我的2015年终总结]]></title>
    <link href="http://www.liushaohua.cn/2016/01/31/%E7%BA%AA%E5%BF%B5%E6%88%91%E7%9A%842015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://www.liushaohua.cn/2016/01/31/纪念我的2015年终总结/</id>
    <published>2016-01-31T03:48:31.000Z</published>
    <updated>2016-01-31T04:46:23.931Z</updated>
    <content type="html"><![CDATA[<p>关于<code>年终总结</code>这回事，我决的还是有<code>必要的</code>，虽然不是那么值得<code>几年</code>,但2015对我来说也是不<code>平凡</code>的一年，时间过得似乎是忽快忽慢，让人措手不及，简单的记录下，激励下自己。<br><a id="more"></a></p>
<h3 id="1_u6708"><a href="#1_u6708" class="headerlink" title="1月"></a>1月</h3><p>1月貌似是没发生什么大事，当时我还住在<code>永泰庄</code>的自如小单间里，生活平淡工作开心</p>
<h3 id="2_u6708"><a href="#2_u6708" class="headerlink" title="2月"></a>2月</h3><p>2月给人的印象是<code>过年月</code>，沉浸在年前、年中<code>鸡血不足</code>的状态</p>
<h3 id="3_u6708"><a href="#3_u6708" class="headerlink" title="3月"></a>3月</h3><p>年后，离开了自己工作近1年半的地方，可能不到1年半，1年零2 3个月？来到了一家<code>创业</code>型公司，开启了一段新的旅程</p>
<h3 id="4_u6708"><a href="#4_u6708" class="headerlink" title="4月"></a>4月</h3><p>4月似乎是自如租的房子到期了，搬到旁边不到100米的另外一个小两居的房子里（忘记是3月还是4月了），房子不大，不到60平，<code>3800</code>，厕所卫生间条件就略差了，一分钱一分价，工作也算正常，创业公司大部分都是加班会多一点，一般不会超过9点，同事关系还不错，不忙的时候还可以学习下，<code>node</code>和<code>mogo</code>都有提高。</p>
<h3 id="5_u30016_u6708"><a href="#5_u30016_u6708" class="headerlink" title="5、6月"></a>5、6月</h3><p>具体记不清楚了，不知哪天上班的时候碰到一只小黑猫，带回了家，俺家也迎来了第二只小猫子，工作上发生一点小插曲，公司扩招的同时，开始有部分技术领导相继离职，后端也开始由PHP转向JAVA，<code>前端</code>还是比较稳定，还是不受重视~~ haha，和领导也有过相关沟通，不管孰是孰非，最终还是申请离职了，<code>6.23</code>号入职现公司。</p>
<h3 id="7_u30018_u30019_u300110_u6708"><a href="#7_u30018_u30019_u300110_u6708" class="headerlink" title="7、8、9、10月"></a>7、8、9、10月</h3><p>已经适应现在的工作，住的地方又由永泰庄搬到了望京，上班骑自行车的话20分钟</p>
<h3 id="11_u300112_u30011_u6708"><a href="#11_u300112_u30011_u6708" class="headerlink" title="11、12、1月"></a>11、12、1月</h3><p>转眼年底，部门的前端团队日益壮大，由之前的1个人变成了现在的7个人，工作流程步入正轨，团队里的同事们比较和谐，团队能力再一点点提高，由之前的PC慢慢的涉及到微信，混合应用，同事领导对我也算认可，自身有待提高的地方还很多，15年的技术成长还算缓慢，16年要加快步伐了，不然就掉队了， - -!又搬家了，搬到了<code>京旺家园</code>，《芈月传》<code>陪</code>女友看完了，收获良多</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>15年对我来说算个沉淀，<code>芈月</code>中说的好<code>有多少付出，就有多少回报</code>,16年要把欠大家和欠自己的补回来，<code>努力工作和学习</code> - 自勉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于<code>年终总结</code>这回事，我决的还是有<code>必要的</code>，虽然不是那么值得<code>几年</code>,但2015对我来说也是不<code>平凡</code>的一年，时间过得似乎是忽快忽慢，让人措手不及，简单的记录下，激励下自己。<br>]]>
    
    </summary>
    
      <category term="年终总结" scheme="http://www.liushaohua.cn/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript学习笔记]]></title>
    <link href="http://www.liushaohua.cn/2016/01/26/ECMAScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.liushaohua.cn/2016/01/26/ECMAScript学习笔记/</id>
    <published>2016-01-26T06:13:51.000Z</published>
    <updated>2016-02-01T07:46:08.894Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript做前端的同学都不会陌生，去年中Ecma国际大会宣布正式批准ECMA-262第6版，亦即ECMAScript 2015（曾用名：ECMAScript 6、ES6）的语言规范。ES6对于ES5是进行了相当大的改进，增加了许许多多的新特性，使得JavaScript<code>看上去</code>不再那么<code>渣</code>，目前还没有一款支持全部ES6新特性的的服务代理(浏览器+服务器端)，目前我们能做到的就是把ES6代码转译成ES5的代码，小道消息说主流浏览器完全实现ES6特性大概需要一年左右时间，毕竟不是官方发出的，要是2年没支持，咱也没办法不是。</p>
<a id="more"></a>
<p>由简入深，实践运用下</p>
<h3 id="let_const_u547D_u4EE4"><a href="#let_const_u547D_u4EE4" class="headerlink" title="let const命令"></a>let const命令</h3><ul>
<li><code>let</code>类此于<code>var</code>，用来声明<code>块级作用域</code>变量，并且不允许重复声明</li>
<li><code>const</code>是用来定义常量，何为常量？<code>一棵树上吊死</code>，也不允许重复声明</li>
</ul>
<p><strong>let代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="comment">//i = 10 for和function不同，for中变量的作用域是上一级function或者全局，而function中变量的作用域是function内部，所以for循环后，i是继续存在的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">2</span>](); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line">       <span class="comment">//a 123</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//a 报错</span></span><br></pre></td></tr></table></figure></p>
<p><strong>const代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WIDTH = <span class="number">45</span>;</span><br><span class="line">WIDTH = <span class="number">50</span>；</span><br><span class="line"><span class="comment">//WIDTH 45</span></span><br></pre></td></tr></table></figure></p>
<h3 id="async_await"><a href="#async_await" class="headerlink" title="async await"></a>async await</h3><ul>
<li>关于<code>异步编程</code>，有多种方法，利弊就不多说了<ul>
<li>callback</li>
<li>事件监听</li>
<li>观察者</li>
<li>Promise</li>
</ul>
</li>
<li>ES6/7提供了终极的解决方案<code>async await</code></li>
<li>有些特性必须要借助<code>polyfill/runtime</code>才能使用</li>
<li><code>并行处理</code> - 使用 <code>async/await</code> 来处理异步时，是串行执行的。但很多场景下我们需要并行处理，这样可以大大提高执行效率，此时可以结合 Promise.all 来处理。</li>
</ul>
<p><strong>async await代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> f1 = <span class="keyword">await</span> readFile(path.normalize(__dirname + <span class="string">'/003.js'</span>));</span><br><span class="line">  <span class="keyword">let</span> f2 = <span class="keyword">await</span> readFile(path.normalize(__dirname + <span class="string">'/003.js'</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result = asyncReadFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">//并行处理</span></span><br><span class="line"><span class="keyword">async</span> indexAction()&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">this</span>.getServiceData1();</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">this</span>.getAPIData2();</span><br><span class="line">    <span class="keyword">let</span> [p1Data, p2Data] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([p1, p2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="export_import"><a href="#export_import" class="headerlink" title="export import"></a>export import</h3><ul>
<li>模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突</li>
<li>定义好模块的输出以后就可以在另外一个模块通过import引用</li>
</ul>
<p><strong>export代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//test.js</span></span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">'Rainbow'</span>;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="string">'24'</span>;</span><br><span class="line"> <span class="keyword">export</span> &#123;name, age&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js default 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者写成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getAge;</span><br></pre></td></tr></table></figure></p>
<p><strong>import代码事例:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line">//index.js</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test form <span class="string">'./test.js'</span>;  <span class="comment">//import * as 就完成了模块整体的导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">// 导入的时候不需要花括号</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><ul>
<li>Class之间可以通过extends关键字，实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  constructor(x, y, color) &#123;</span><br><span class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 等同于parent.constructor(x, y)</span></span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 等同于parent.toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>ECMAScript做前端的同学都不会陌生，去年中Ecma国际大会宣布正式批准ECMA-262第6版，亦即ECMAScript 2015（曾用名：ECMAScript 6、ES6）的语言规范。ES6对于ES5是进行了相当大的改进，增加了许许多多的新特性，使得JavaScript<code>看上去</code>不再那么<code>渣</code>，目前还没有一款支持全部ES6新特性的的服务代理(浏览器+服务器端)，目前我们能做到的就是把ES6代码转译成ES5的代码，小道消息说主流浏览器完全实现ES6特性大概需要一年左右时间，毕竟不是官方发出的，要是2年没支持，咱也没办法不是。</p>]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="http://www.liushaohua.cn/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为你的网站升级HTTP/2]]></title>
    <link href="http://www.liushaohua.cn/2015/08/21/%E4%B8%BA%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8D%87%E7%BA%A7http-2/"/>
    <id>http://www.liushaohua.cn/2015/08/21/为你的网站升级http-2/</id>
    <published>2015-08-21T07:45:34.000Z</published>
    <updated>2016-02-14T07:45:28.827Z</updated>
    <content type="html"><![CDATA[<p>关于http/2被炒火已经有一段日子了，并且已经有许多站点争相追逐使用，今年5月终于定稿发布了，作为一个不热爱<code>学习</code>的前端狗，已经比那些热爱学习的大神们晚了好久，是时候<code>折腾</code>一下子了，不然<code>老了</code>是真的动不了了。<br>早些年Nginx发布了一个<code>early-alpha patch</code>模块来对HTTP/2进行支持，从1.9.5开始<code>ttpv2module</code> 替换了 <code>ngxhttpspdy_module</code> 正式全面的对HTTP/2支持。<br><a id="more"></a></p>
<h3 id="SSL_u90E8_u7F72"><a href="#SSL_u90E8_u7F72" class="headerlink" title="SSL部署"></a>SSL部署</h3><p>SSL有几款是免费的，生成证书后<code>listen 443</code>即可;</p>
<h3 id="u5B89_u88C5/_u5347_u7EA7Nginx"><a href="#u5B89_u88C5/_u5347_u7EA7Nginx" class="headerlink" title="安装/升级Nginx"></a>安装/升级Nginx</h3><p>如果你服务器的Nginx版本<code>太低</code>，必须要升级下<br>修改<code>/etc/yum.repos.d/nginx.repo</code>的nginx仓库地址<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo  </span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/  </span><br><span class="line">gpgcheck=0  </span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p>
<p>没安装Nginx的话 <code>yum install nginx</code>，已经安装了的话，就可以 <code>yum clean all &amp;&amp; yum update nginx</code>进行升级。</p>
<h3 id="u68C0_u6D4BNginx_u7248_u672C_u81F3_u5C11_u89811-9-5_u4EE5_u4E0A"><a href="#u68C0_u6D4BNginx_u7248_u672C_u81F3_u5C11_u89811-9-5_u4EE5_u4E0A" class="headerlink" title="检测Nginx版本至少要1.9.5以上"></a>检测Nginx版本至少要1.9.5以上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/<span class="number">1.9</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>
<h3 id="Nginx_u542F_u52A8"><a href="#Nginx_u542F_u52A8" class="headerlink" title="Nginx启动"></a>Nginx启动</h3><p>只需要修改<code>nginx.conf</code>中的配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;  </span><br><span class="line">  <span class="title">listen</span>        <span class="number">443</span> ssl http2; </span><br><span class="line">  <span class="title">server_name</span>   liushaohua.cn;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#SSL配置</span></span><br><span class="line">  <span class="title">ssl</span>                   <span class="built_in">on</span>;</span><br><span class="line">  <span class="title">ssl_certificate</span>       /etc/nginx/conf.d/certificate.crt;</span><br><span class="line">  <span class="title">ssl_certificate_key</span>   /etc/nginx/conf.d/certificate.key;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>listen 443 ssl http2</code></p>
<h3 id="u5F3A_u5236https"><a href="#u5F3A_u5236https" class="headerlink" title="强制https"></a>强制https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">if</span> (<span class="variable">$server_port</span> = <span class="number">80</span>) &#123;</span><br><span class="line">	<span class="title">rewrite</span><span class="regexp"> ^(.*)$</span> <span class="url">https://<span class="variable">$host</span><span class="variable">$1</span></span> <span class="built_in">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u91CD_u542F"><a href="#u91CD_u542F" class="headerlink" title="重启"></a>重启</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx -s reload</span><br><span class="line">netstat -apnt | grep 443</span><br></pre></td></tr></table></figure>
<p>如果显示为下面这样<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">tcp</span>        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0.0.0:443</span>             <span class="number">0.0.0.0</span>:*               LISTEN      <span class="number">7255</span>/nginx: master</span><br></pre></td></tr></table></figure></p>
<p>访问下你的网站，打开开发者工具，看看<code>Protocol</code>是否返回了h2,返回了的话就ok了~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于http/2被炒火已经有一段日子了，并且已经有许多站点争相追逐使用，今年5月终于定稿发布了，作为一个不热爱<code>学习</code>的前端狗，已经比那些热爱学习的大神们晚了好久，是时候<code>折腾</code>一下子了，不然<code>老了</code>是真的动不了了。<br>早些年Nginx发布了一个<code>early-alpha patch</code>模块来对HTTP/2进行支持，从1.9.5开始<code>ttpv2module</code> 替换了 <code>ngxhttpspdy_module</code> 正式全面的对HTTP/2支持。<br>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://www.liushaohua.cn/tags/HTTP/"/>
    
      <category term="Nginx" scheme="http://www.liushaohua.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[new一个hexo]]></title>
    <link href="http://www.liushaohua.cn/2015/07/12/new%E4%B8%80%E4%B8%AAhexo/"/>
    <id>http://www.liushaohua.cn/2015/07/12/new一个hexo/</id>
    <published>2015-07-12T01:28:43.000Z</published>
    <updated>2016-01-31T01:21:57.243Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;时隔多年，我终于又开始用个人网站了，记得当年第一次用的时候是2011年，为了找工作购买了域名<a href="http://www.hinlary" target="_blank" rel="external">www.hinlary.com</a>，还购买了廉价服务器,一个月也就10几20几块吧，当时只是放了静态页面上去，后续找到工作后就没有在用过，空间到期了懒得续了，域名到是续过2次就再没续过，随后也是过期了，后来又过了不知多久，闲来无事就注册了现在这个域名，买了个相对便宜的香港主机150一年，就在上面搭了WordPress写过几篇博文过了1年主机到期了又不了了之了，总之就是坚持不下来~14年左右吧看大家用github，我也跟风搞了一发，搭建了个github-page,随意放了点静态页面，也是懒的原因，浑浑噩噩的度过了15年，先后换了几台电脑，由DELL换成了mac，又换回了公司配的DELL，加上自己存放东西毫无规律，这么些年写的代码都找不到了，也是醉的不行了~桑不起的前端狗撒~~~  !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;时隔多年，我终于又开始用个人网站了，记得当年第一次用的时候是2011年，为了找工作购买了域名<a href="http://www.hinlary" target="_blank" rel="external">www.hinlary.com</a>]]>
    </summary>
    
      <category term="hexo" scheme="http://www.liushaohua.cn/tags/hexo/"/>
    
      <category term="个人随笔" scheme="http://www.liushaohua.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World test]]></title>
    <link href="http://www.liushaohua.cn/2015/07/01/hello-world/"/>
    <id>http://www.liushaohua.cn/2015/07/01/hello-world/</id>
    <published>2015-07-01T06:13:51.000Z</published>
    <updated>2016-01-31T01:21:11.218Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7下安装mysql]]></title>
    <link href="http://www.liushaohua.cn/2015/04/12/centos7%E4%B8%8B%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://www.liushaohua.cn/2015/04/12/centos7下安装mysql/</id>
    <published>2015-04-12T03:13:45.000Z</published>
    <updated>2016-02-04T05:09:38.197Z</updated>
    <content type="html"><![CDATA[<p>我在我笔记本中安装了<code>mysql</code>，而我的远程服务上还没安装，身为一个小白，要多折腾一下。<br><a id="more"></a><br>由于我服务器的系统是<code>CentOS7</code>，而CentOS7的yum源中貌似没有正常安装mysql时的<code>mysql-sever</code>文件，需要去官网上下载。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-<span class="number">5</span>.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-<span class="number">5</span>.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<h2 id="u8BA9MySQL_u670D_u52A1_u5668_u88AB_u8FDC_u7A0B_u8BBF_u95EE"><a href="#u8BA9MySQL_u670D_u52A1_u5668_u88AB_u8FDC_u7A0B_u8BBF_u95EE" class="headerlink" title="让MySQL服务器被远程访问"></a>让MySQL服务器被远程访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//在本机登入mysql后，更改<span class="string">"mysql"</span>数据库里的<span class="string">"user"</span>表里的<span class="string">"host"</span>项，从<span class="string">"localhost"</span>改为<span class="string">"%"</span>。</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;select <span class="string">'host'</span> from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">//查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user =<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">//如果报错：ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">'%-root'</span> <span class="keyword">for</span> key <span class="string">'PRIMARY'</span></span><br><span class="line"></span><br><span class="line">select host from user <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line">//查看一下host是否已经有了%这个值</span><br><span class="line"></span><br><span class="line">+--------------+------+</span><br><span class="line">| host         | user |</span><br><span class="line">+--------------+------+</span><br><span class="line">| %            | root |</span><br><span class="line">| <span class="number">127.0</span>.<span class="number">0.1</span>    | root |</span><br><span class="line">| ::<span class="number">1</span>          | root |</span><br><span class="line">| iz25zf7cpbkz | root |</span><br><span class="line">+--------------+------+</span><br><span class="line"></span><br><span class="line">//如果有了直接执行下面的flush privileges;即可</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;select host,user from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt;quit</span><br></pre></td></tr></table></figure>
<p>然后就可以愉快的去玩耍了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我在我笔记本中安装了<code>mysql</code>，而我的远程服务上还没安装，身为一个小白，要多折腾一下。<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.liushaohua.cn/tags/Linux/"/>
    
      <category term="mysql" scheme="http://www.liushaohua.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[express4.x体验]]></title>
    <link href="http://www.liushaohua.cn/2015/04/02/express4-x%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.liushaohua.cn/2015/04/02/express4-x体验/</id>
    <published>2015-04-02T02:04:36.000Z</published>
    <updated>2016-02-02T02:33:05.394Z</updated>
    <content type="html"><![CDATA[<p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>
<a id="more"></a>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express</span><br><span class="line">npm install -g express-generator</span><br><span class="line">express myBlog</span><br><span class="line">cd myBlog &amp;&amp; npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>npm start 之后就跑起来了，打开浏览器localhost 3000端口 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a></p>
<ul>
<li><p>常用的express函数</p>
<ul>
<li><code>res.redirect(&#39;/&#39;)</code>; 重定向</li>
<li><code>express -e myblog</code> 创建博客的时候使用ejs 默认为jade</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/reg'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"> 　　<span class="keyword">var</span> userName = req.body.username;   <span class="comment">//获取post后页面内的name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>var session = require(&#39;express-session&#39;);</code>     //引入session  </p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用session</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">	secret: <span class="string">'myblog'</span>,</span><br><span class="line">	resave: <span class="literal">false</span>,</span><br><span class="line">	saveUninitialized: <span class="literal">false</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>app.use(flash());</code>  //使用flash  </p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">	res.locals.error = req.flash(<span class="string">'error'</span>).toString() || <span class="string">""</span>;</span><br><span class="line">	res.locals.success = req.flash(<span class="string">'success'</span>).toString() || <span class="string">""</span>;</span><br><span class="line">	res.locals.title = <span class="string">""</span>;</span><br><span class="line">	res.locals.count = <span class="number">0</span>;</span><br><span class="line">	res.locals.pageNum= <span class="number">0</span>;</span><br><span class="line">	res.locals.pageSize= <span class="number">0</span>;</span><br><span class="line">	res.locals.totalPage= <span class="number">0</span>;</span><br><span class="line">	res.locals.keyword=<span class="string">''</span>;</span><br><span class="line">	res.locals.user = req.session.user;</span><br><span class="line">	next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//app.locals：这是一个函数对象，可以给它增加新的属性。程序内所有页面模板都能访问这个对象，所以可以用它保存全局配置变量供页面模板使用。</span></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">&lt;%=title%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">%=error%</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>再看下app.js      </p>
<ul>
<li><p>1.app.set(name,value)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把名字为name的项的值设为value，用于设置参数</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line"><span class="comment">//设置了模版文件夹的路径；主要清楚__dirname的意思就可以了，它是node.js中的全局变量，表示取当前执行文件的路径</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);  <span class="comment">//设置使用的模版引擎，我们使用的ejs</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.app.use([path], function)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用这个方法来使用中间件，因为express依赖于connect，有大量的中间件，可以通过app.use来使用；</span></span><br><span class="line"><span class="comment">//path参数可以不填，默认为'/' (项目中用到的就不分别解释了，用到的时候自已查一API的中间件部分)</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>))); </span><br><span class="line"><span class="comment">//这一句中可能要注意一下，express.static( )是处理静态请求的，设置了public文件，</span></span><br><span class="line"><span class="comment">//public下所有文件都会以静态资料文件形式返回（如样式、脚本、图片素材等文件）</span></span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, routes);app.use(<span class="string">'/users'</span>, users);</span><br><span class="line"><span class="comment">//上面代码表示当用户使用/访问时，调用routes，即routes目录下的index.js文件，</span></span><br><span class="line"><span class="comment">//其中.js后缀省略，用/users访问时，调用routes目录下users.js文件</span></span><br><span class="line"><span class="comment">//这就是为什么，我们示例中用http://localhost:8100/访问时候，</span></span><br><span class="line"><span class="comment">//修改的index.js里的文件代码可以执行（当然index.js文件中也要写对应的代码，才能是我们最终看到的效果）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.app.get(name)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取名为name的项的值</span><br><span class="line"><span class="keyword">if</span> (app.get(<span class="string">'env'</span>) === <span class="string">'development'</span>) &#123; </span><br><span class="line">	app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123; </span><br><span class="line">		res.status(err.status || <span class="number">500</span>); </span><br><span class="line">		res.render(<span class="string">'error'</span>, &#123; message: err.message, error: err &#125;); </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">　　表示如果是开发环境，处理error时会输出堆栈信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.路由文件index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">主要看下面这段代码</span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; </span><br><span class="line">	res.render(<span class="string">'index'</span>, &#123; </span><br><span class="line">		title: <span class="string">'&lt;h1&gt;Express&lt;/h1&gt;'</span> ,</span><br><span class="line">		users:[</span><br><span class="line">				&#123;username: <span class="string">'Wilson'</span>&#125;,</span><br><span class="line">				&#123;username: <span class="string">'Wilson Zhong'</span>&#125;, </span><br><span class="line">				&#123;username: <span class="string">'Zhong Wei'</span>&#125;</span><br><span class="line">		] </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//这段表示，router.get表示通过get请求/时，响应后面的function处理，两个参数分别是request、response；</span></span><br><span class="line"><span class="comment">//res.render表示调用模版引擎解析名字index的模板，传并传入了title和users两个对象做为参数；</span></span><br><span class="line"><span class="comment">//为什么它会知道解板views目录下的index.ejs?而不是其它目录下的文件，或者后其它后缀名的文件？</span></span><br><span class="line"><span class="comment">//原因就是app.js中的设置：</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line"><span class="comment">//而这两个参数在index.ejs中可以使用，那么加上ejs的部分，就会返回最终生成的页面展现！</span></span><br><span class="line"><span class="comment">//res.send("req.host获取主机名，req.path获取请求路径名!");</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>5.获取url参数 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">url：http:<span class="comment">//localhost:8888/select?name=a&amp;id=5</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123; </span><br><span class="line">	<span class="keyword">var</span> pathname = url.parse(request.url).pathname;  <span class="comment">//pathname =&gt; select </span></span><br><span class="line">	   </span><br><span class="line">	<span class="keyword">var</span> arg = url.parse(request.url).query;          <span class="comment">//arg =&gt; name=a&amp;id=5 </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + arg ); </span><br><span class="line">	<span class="keyword">var</span> str = querystring.parse(arg);                <span class="comment">//str=&gt; &#123;name:'a',id:'5'&#125; </span></span><br><span class="line">	   </span><br><span class="line">	<span class="keyword">var</span> arg1 = url.parse(request.url, <span class="literal">true</span>).query;   <span class="comment">//arg1 =&gt; &#123;name:'a',id:'5'&#125; </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + arg1 ); </span><br><span class="line">	   </span><br><span class="line">	<span class="keyword">var</span> name = querystring.parse(arg).name;         <span class="comment">//name =&gt; a </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"name = "</span>+name); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>); </span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>]]>
    
    </summary>
    
      <category term="express" scheme="http://www.liushaohua.cn/tags/express/"/>
    
      <category term="node.js" scheme="http://www.liushaohua.cn/tags/node-js/"/>
    
  </entry>
  
</feed>
